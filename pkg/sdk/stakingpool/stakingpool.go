// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package stakingpool

import (
	"errors"
	"fmt"
	"math/big"
	"strings"

	"github.com/TagusLabs/genesis-smart-contracts/abigen/generated"
	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

type BeaconChainProofsStateRootProof struct {
	BeaconStateRoot [32]byte
	Proof           []byte
}

type IRestakingPoolUnstake struct {
	Recipient common.Address
	Amount    *big.Int
}

var ContractMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"OnlyGovernanceAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOperatorAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"max\",\"type\":\"uint64\"}],\"name\":\"PoolDistributeGasLimitNotInRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolDistributeGasLimitNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRestakerExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolRestakerNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolStakeAmLessThanMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolUnstakeAmLessThanMin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolWrongInputLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ClaimExpected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"prevValue\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newValue\",\"type\":\"uint32\"}],\"name\":\"DistributeGasLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PendingUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"claimers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"RewardsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UnstakeClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structIRestakingPool.Unstake[]\",\"name\":\"unstakes\",\"type\":\"tuple[]\"}],\"name\":\"UnstakesDistributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"activateRestaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"addRestaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"deposit_data_roots\",\"type\":\"bytes32[]\"}],\"name\":\"batchDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"claimableOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributeUnstakes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCert\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEigenPodManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPending\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getPendingRequestsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getPendingUnstakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingUnstakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"hasClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIStakingConfig\",\"name\":\"stakingConfig\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributeGasLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"contractIERC20[]\",\"name\":\"tokenList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amountsToWithdraw\",\"type\":\"uint256[]\"}],\"name\":\"recoverTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setDistributeGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeCerts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstakeCerts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"oracleTimestamp\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"beaconStateRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"structBeaconChainProofs.StateRootProof\",\"name\":\"stateRootProof\",\"type\":\"tuple\"},{\"internalType\":\"uint40[]\",\"name\":\"validatorIndices\",\"type\":\"uint40[]\"},{\"internalType\":\"bytes[]\",\"name\":\"validatorFieldsProofs\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[][]\",\"name\":\"validatorFields\",\"type\":\"bytes32[][]\"}],\"name\":\"verifyWithdrawalCredentials\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"}],\"name\":\"withdrawBeforeRestaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"provider\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amountToWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawNonBeaconChainETHBalanceWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561000f575f80fd5b50612b7e8061001d5f395ff3fe6080604052600436106101af575f3560e01c806370131f4d116100e7578063c664d38b11610087578063e93c4f1511610062578063e93c4f15146104a5578063eea4684d146104b9578063fa57d002146104d8578063fb8fa290146104ec575f80fd5b8063c664d38b14610453578063cd6dc68714610467578063d11531da14610486575f80fd5b80638e59fbf6116100c25780638e59fbf6146103f8578063ac76d4501461040d578063b3870ef714610415578063c2a672e014610434575f80fd5b806370131f4d1461035f5780637cf3d51e1461037e5780638903ab9d146103c4575f80fd5b80633a4b66f11161015257806348abd1961161012d57806348abd196146102f957806356a3b5fa146103185780635f4aa38d1461032c5780636180c6091461034b575f80fd5b80633a4b66f11461029e578063409cb613146102a657806346faa33c146102c5575f80fd5b8063042fc3a61161018d578063042fc3a61461022b57806311ae9ed21461024a578063126d5df61461025e578063183cdf2414610272575f80fd5b806301ff923c146101b3578063034c4454146101e85780630359cc221461020a575b5f80fd5b3480156101be575f80fd5b506101d26101cd3660046120a2565b61050b565b6040516101df91906120fd565b60405180910390f35b3480156101f3575f80fd5b506101fc610623565b6040519081526020016101df565b348015610215575f80fd5b506102296102243660046121be565b610692565b005b348015610236575f80fd5b506102296102453660046121f7565b6107eb565b348015610255575f80fd5b506101fc6108db565b348015610269575f80fd5b506036546101fc565b34801561027d575f80fd5b5061028661090a565b6040516001600160a01b0390911681526020016101df565b610229610975565b3480156102b1575f80fd5b506102296102c036600461220e565b61097f565b3480156102d0575f80fd5b506101fc6102df3660046120a2565b6001600160a01b03165f9081526038602052604090205490565b348015610304575f80fd5b50610229610313366004612238565b610c3a565b348015610323575f80fd5b506101fc610ca7565b348015610337575f80fd5b506102296103463660046122c0565b610cee565b348015610356575f80fd5b50603a546101fc565b34801561036a575f80fd5b506102296103793660046121be565b610f8e565b348015610389575f80fd5b506103b46103983660046120a2565b6001600160a01b03165f908152603b6020526040902054151590565b60405190151581526020016101df565b3480156103cf575f80fd5b506101fc6103de3660046120a2565b6001600160a01b03165f908152603b602052604090205490565b348015610403575f80fd5b506101fc61271081565b610229611076565b348015610420575f80fd5b5061022961042f3660046123ff565b611275565b34801561043f575f80fd5b5061022961044e36600461220e565b611357565b34801561045e575f80fd5b50610286611365565b348015610472575f80fd5b5061022961048136600461220e565b6113ac565b348015610491575f80fd5b506102296104a03660046120a2565b611596565b3480156104b0575f80fd5b506101fc6116ca565b3480156104c4575f80fd5b506102296104d3366004612507565b6116d3565b3480156104e3575f80fd5b506102296117f7565b3480156104f7575f80fd5b506102296105063660046121be565b611b66565b6035546037546060915f91829161052191612605565b6001600160401b038111156105385761053861210f565b604051908082528060200260200182016040528015610561578160200160208202803683370190505b506035549091505b60375481101561060057846001600160a01b0316603782815481106105905761059061261e565b5f918252602090912001546001600160a01b0316036105ee57603981815481106105bc576105bc61261e565b905f5260205f2001548284815181106105d7576105d761261e565b60209081029190910101526105eb83612632565b92505b806105f881612632565b915050610569565b505f82825161060f9190612605565b9050801561061b578282525b509392505050565b6033546040805162d3111560e21b815290515f926001600160a01b03169163034c44549160048083019260209291908290030181865afa158015610669573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068d919061264a565b905090565b60335f9054906101000a90046001600160a01b03166001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107069190612661565b6001600160a01b0316336001600160a01b03161461073f5760405162461bcd60e51b81526004016107369061267c565b60405180910390fd5b5f61074982611d50565b9050806001600160a01b0316630cd4649e6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610783575f80fd5b505af1158015610795573d5f803e3d5ffd5b50505050806001600160a01b031663ef8cdf7c6040518163ffffffff1660e01b81526004015f604051808303815f87803b1580156107d1575f80fd5b505af11580156107e3573d5f803e3d5ffd5b505050505050565b60335f9054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061085f9190612661565b6001600160a01b0316336001600160a01b03161461088f5760405162461bcd60e51b8152600401610736906126bf565b60348054908290556040805163ffffffff8084168252841660208201527f55c1474264b8038534b3e34b09a3a99d1f3436634d4e34fa13cea4c33c9a832e910160405180910390a15050565b5f47816108e7603a5490565b9050818111156108f9575f9250505090565b6109038183612605565b9250505090565b60335460408051635eaad42760e11b815290515f926001600160a01b03169163bd55a84e9160048083019260209291908290030181865afa158015610951573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061068d9190612661565b61097d611076565b565b60335460408051633b1b0d4360e21b8152905133925f926001600160a01b039091169163ec6c350c916004808201926020929091908290030181865afa1580156109cb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109ef9190612661565b604051600162e422bd60e01b03198152600481018590529091505f906001600160a01b0383169063ff1bdd4390602401602060405180830381865afa158015610a3a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a5e919061264a565b905060335f9054906101000a90046001600160a01b03166001600160a01b031663034c44546040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ab0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ad4919061264a565b811015610af35760405162461bcd60e51b815260040161073690612703565b6040516370a0823160e01b81526001600160a01b0384811660048301528591908416906370a0823190602401602060405180830381865afa158015610b3a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b5e919061264a565b1015610bca5760405162461bcd60e51b815260206004820152603560248201527f5374616b696e67506f6f6c3a2063616e6e6f7420756e7374616b65206d6f7265604482015274207468616e2068617665206f6e206164647265737360581b6064820152608401610736565b604051632770a7eb60e21b81526001600160a01b03848116600483015260248201869052831690639dc29fac906044015f604051808303815f87803b158015610c11575f80fd5b505af1158015610c23573d5f803e3d5ffd5b50505050610c3383868684611da1565b5050505050565b5f610c4483611d50565b60405163e2c8344560e01b8152306004820152602481018490529091506001600160a01b0382169063e2c83445906044015f604051808303815f87803b158015610c8c575f80fd5b505af1158015610c9e573d5f803e3d5ffd5b50505050505050565b60335460408051632b51dafd60e11b815290515f926001600160a01b0316916356a3b5fa9160048083019260209291908290030181865afa158015610669573d5f803e3d5ffd5b60335f9054906101000a90046001600160a01b03166001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d3e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d629190612661565b6001600160a01b0316336001600160a01b031614610d925760405162461bcd60e51b81526004016107369061267c565b610d9a611f17565b848381141580610daa5750808214155b15610dc8576040516367af08e760e11b815260040160405180910390fd5b610ddb816801bc16d674ec800000612755565b610de36108db565b1015610e0257604051635093740560e01b815260040160405180910390fd5b5f603c5f610e158b805160209091012090565b815260208101919091526040015f20546001600160a01b0316905080610e4e57604051631b355a8760e31b815260040160405180910390fd5b5f5b82811015610f3357816001600160a01b0316639b4e46346801bc16d674ec8000008b8b85818110610e8357610e8361261e565b9050602002810190610e95919061276c565b8b8b87818110610ea757610ea761261e565b9050602002810190610eb9919061276c565b8b8b89818110610ecb57610ecb61261e565b905060200201356040518763ffffffff1660e01b8152600401610ef29594939291906127d6565b5f604051808303818588803b158015610f09575f80fd5b505af1158015610f1b573d5f803e3d5ffd5b50505050508080610f2b90612632565b915050610e50565b5088604051610f42919061280f565b60405180910390207f82893d4437db377df0abca554a4a9ef54de226c99efe74077b214d6d3390e7dd8989604051610f7b9291906128d7565b60405180910390a25050610c9e60018055565b60335f9054906101000a90046001600160a01b03166001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fde573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110029190612661565b6001600160a01b0316336001600160a01b0316146110325760405162461bcd60e51b81526004016107369061267c565b5f61103c82611d50565b9050806001600160a01b031663baa7145a6040518163ffffffff1660e01b81526004015f604051808303815f87803b158015610783575f80fd5b60335460408051632b51dafd60e11b8152905134926001600160a01b0316916356a3b5fa9160048083019260209291908290030181865afa1580156110bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110e1919061264a565b8110156111005760405162461bcd60e51b815260040161073690612703565b60335460408051633b1b0d4360e21b815290515f926001600160a01b03169163ec6c350c9160048083019260209291908290030181865afa158015611147573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061116b9190612661565b6040516363737ac960e11b8152600481018490529091505f906001600160a01b0383169063c6e6f59290602401602060405180830381865afa1580156111b3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111d7919061264a565b6040516340c10f1960e01b8152336004820152602481018290529091506001600160a01b038316906340c10f19906044015f604051808303815f87803b15801561121f575f80fd5b505af1158015611231573d5f803e3d5ffd5b505060408051868152602081018590523393507f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9092500160405180910390a2505050565b5f61127f84611d50565b9050806001600160a01b031663dda3346c848460335f9054906101000a90046001600160a01b03166001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113069190612661565b6040518463ffffffff1660e01b8152600401611324939291906128ea565b5f604051808303815f87803b15801561133b575f80fd5b505af115801561134d573d5f803e3d5ffd5b5050505050505050565b611361828261097f565b5050565b6033546040805163476c397360e11b815290515f926001600160a01b031691638ed872e69160048083019260209291908290030181865afa158015610951573d5f803e3d5ffd5b5f54610100900460ff16158080156113ca57505f54600160ff909116105b806113e35750303b1580156113e357505f5460ff166001145b6114465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610736565b5f805460ff191660011790558015611467575f805461ff0019166101001790555b603380546001600160a01b0319166001600160a01b0385169081179091556040805163c664d38b60e01b8152905163c664d38b916004808201926020929091908290030181865afa1580156114be573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906114e29190612661565b6001600160a01b03166384d810626040518163ffffffff1660e01b81526004016020604051808303815f875af115801561151e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115429190612661565b5061154c82611f70565b8015611591575f805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b61159e611f17565b6001600160a01b0381166115c5576040516321cb944560e11b815260040160405180910390fd5b6001600160a01b0381165f908152603b6020526040812054908190036115fe57604051630d23170560e01b815260040160405180910390fd5b603a5447101561162157604051635093740560e01b815260040160405180910390fd5b80603a5f8282546116329190612605565b90915550506001600160a01b0382165f908152603b6020526040812081905561165c838383611f79565b90508061167c57604051634dbb90c960e01b815260040160405180910390fd5b60405182815233906001600160a01b038516907febc6a30f46090cafd1f043241dbc148c4310b7026aae29ff950ea25a5411879b9060200160405180910390a350506116c760018055565b50565b5f61068d6108db565b60335f9054906101000a90046001600160a01b03166001600160a01b031663e7f43c686040518163ffffffff1660e01b8152600401602060405180830381865afa158015611723573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117479190612661565b6001600160a01b0316336001600160a01b0316146117775760405162461bcd60e51b81526004016107369061267c565b5f6117818a611d50565b604051633f65cf1960e01b81529091506001600160a01b03821690633f65cf19906117be908c908c908c908c908c908c908c908c90600401612a19565b5f604051808303815f87803b1580156117d5575f80fd5b505af11580156117e7573d5f803e3d5ffd5b5050505050505050505050505050565b6117ff611f17565b5f603454116118655760405162461bcd60e51b815260206004820152602c60248201527f5374616b696e67506f6f6c3a20444953545249425554455f4741535f4c494d4960448201526b15081a5cc81b9bdd081cd95d60a21b6064820152608401610736565b5f61186e6108db565b6035546037549192505f916118839190612605565b6001600160401b0381111561189a5761189a61210f565b6040519080825280602002602001820160405280156118c3578160200160208202803683370190505b506035546037549192505f916118d99190612605565b6001600160401b038111156118f0576118f061210f565b604051908082528060200260200182016040528015611919578160200160208202803683370190505b506035549091505f905b6037548110801561193357505f85115b801561194057506034545a115b15611afb575f603782815481106119595761195961261e565b5f918252602082200154603980546001600160a01b03909216935090849081106119855761198561261e565b5f9182526020909120015490506001600160a01b03821615806119a6575080155b156119bd576119b483612632565b92505050611923565b808710156119cc575050611afb565b6001600160a01b0382165f90815260386020526040812080548392906119f3908490612605565b925050819055508060365f828254611a0b9190612605565b90915550611a1b90508188612605565b965060378381548110611a3057611a3061261e565b5f91825260209091200180546001600160a01b03191690556039805484908110611a5c57611a5c61261e565b5f918252602082200155611a6f83612632565b92505f611a7e83836001611f79565b905080611a9757611a8f838361200a565b505050611923565b82878681518110611aaa57611aaa61261e565b60200260200101906001600160a01b031690816001600160a01b03168152505081868681518110611add57611add61261e565b6020908102919091010152611af185612632565b9450505050611923565b603581905583515f90611b0f908490612605565b90508015611b1e578285528284525b7fe69d325558610ba73c441901deb46d7f251108348dc5dc9447e8866774c12edc8585604051611b4f929190612ad6565b60405180910390a150505050505061097d60018055565b60335f9054906101000a90046001600160a01b03166001600160a01b031663289b3c0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bb6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bda9190612661565b6001600160a01b0316336001600160a01b031614611c0a5760405162461bcd60e51b8152600401610736906126bf565b805160208201205f905f818152603c60205260409020549091506001600160a01b03168015611c4c57604051638b1a6ce760e01b815260040160405180910390fd5b60335f9054906101000a90046001600160a01b03166001600160a01b0316633f69e0f76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c9c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cc09190612661565b6001600160a01b0316639ce953c86040518163ffffffff1660e01b81526004016020604051808303815f875af1158015611cfc573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d209190612661565b5f928352603c602052604090922080546001600160a01b0319166001600160a01b03909316929092179091555050565b5f603c5f611d6384805160209091012090565b815260208101919091526040015f20546001600160a01b0316905080611d9c57604051631b355a8760e31b815260040160405180910390fd5b919050565b8015801590611db857506001600160a01b03831615155b611e165760405162461bcd60e51b815260206004820152602960248201527f4c6971756964546f6b656e5374616b696e67506f6f6c3a207a65726f20696e7060448201526875742076616c75657360b81b6064820152608401610736565b8060365f828254611e279190612b35565b90915550506037805460018082019092557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b0386169081179091556039805492830190557fdc16fef70f8d5ddbc01ee3d903d1e69c18a3c7be080eb86a81e0578814ee58d39091018290555f9081526038602052604081208054839290611ec3908490612b35565b909155505060408051828152602081018490526001600160a01b0380861692908716917fe8f73d529f5ced08581a2c18456a6530dbd0dddf94d8c98e0ab8f9883e2f4482910160405180910390a350505050565b600260015403611f695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610736565b6002600155565b6116c7816107eb565b5f82471015611f9b57604051635093740560e01b815260040160405180910390fd5b838215611fb3575f805f808785612710f1915061061b565b6040516001600160a01b0382169085905f81818185875af1925050503d805f8114611ff9576040519150601f19603f3d011682016040523d82523d5f602084013e611ffe565b606091505b50909695505050505050565b80603a5f82825461201b9190612b35565b90915550506001600160a01b0382165f908152603b602052604081208054839290612047908490612b35565b90915550506040518181526001600160a01b038316907ff4426c1412b22225874f3898e67e34c12ba628bff6d89fd87ba593927a80b4219060200160405180910390a25050565b6001600160a01b03811681146116c7575f80fd5b5f602082840312156120b2575f80fd5b81356120bd8161208e565b9392505050565b5f8151808452602080850194508084015f5b838110156120f2578151875295820195908201906001016120d6565b509495945050505050565b602081525f6120bd60208301846120c4565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b038111828210171561214b5761214b61210f565b604052919050565b5f82601f830112612162575f80fd5b81356001600160401b0381111561217b5761217b61210f565b61218e601f8201601f1916602001612123565b8181528460208386010111156121a2575f80fd5b816020850160208301375f918101602001919091529392505050565b5f602082840312156121ce575f80fd5b81356001600160401b038111156121e3575f80fd5b6121ef84828501612153565b949350505050565b5f60208284031215612207575f80fd5b5035919050565b5f806040838503121561221f575f80fd5b823561222a8161208e565b946020939093013593505050565b5f8060408385031215612249575f80fd5b82356001600160401b0381111561225e575f80fd5b61226a85828601612153565b95602094909401359450505050565b5f8083601f840112612289575f80fd5b5081356001600160401b0381111561229f575f80fd5b6020830191508360208260051b85010111156122b9575f80fd5b9250929050565b5f805f805f805f6080888a0312156122d6575f80fd5b87356001600160401b03808211156122ec575f80fd5b6122f88b838c01612153565b985060208a013591508082111561230d575f80fd5b6123198b838c01612279565b909850965060408a0135915080821115612331575f80fd5b61233d8b838c01612279565b909650945060608a0135915080821115612355575f80fd5b506123628a828b01612279565b989b979a50959850939692959293505050565b5f6001600160401b0382111561238d5761238d61210f565b5060051b60200190565b5f82601f8301126123a6575f80fd5b813560206123bb6123b683612375565b612123565b82815260059290921b840181019181810190868411156123d9575f80fd5b8286015b848110156123f457803583529183019183016123dd565b509695505050505050565b5f805f60608486031215612411575f80fd5b83356001600160401b0380821115612427575f80fd5b61243387838801612153565b9450602091508186013581811115612449575f80fd5b8601601f81018813612459575f80fd5b80356124676123b682612375565b81815260059190911b8201840190848101908a831115612485575f80fd5b928501925b828410156124ac57833561249d8161208e565b8252928501929085019061248a565b965050505060408601359150808211156124c4575f80fd5b506124d186828701612397565b9150509250925092565b80356001600160401b0381168114611d9c575f80fd5b5f60408284031215612501575f80fd5b50919050565b5f805f805f805f805f60c08a8c03121561251f575f80fd5b89356001600160401b0380821115612535575f80fd5b6125418d838e01612153565b9a5061254f60208d016124db565b995060408c0135915080821115612564575f80fd5b6125708d838e016124f1565b985060608c0135915080821115612585575f80fd5b6125918d838e01612279565b909850965060808c01359150808211156125a9575f80fd5b6125b58d838e01612279565b909650945060a08c01359150808211156125cd575f80fd5b506125da8c828d01612279565b915080935050809150509295985092959850929598565b634e487b7160e01b5f52601160045260245ffd5b81810381811115612618576126186125f1565b92915050565b634e487b7160e01b5f52603260045260245ffd5b5f60018201612643576126436125f1565b5060010190565b5f6020828403121561265a575f80fd5b5051919050565b5f60208284031215612671575f80fd5b81516120bd8161208e565b60208082526023908201527f5374616b696e67506f6f6c3a206f6e6c7920636f6e73656e73757320616c6c6f6040820152621dd95960ea1b606082015260800190565b60208082526024908201527f5374616b696e67506f6f6c3a206f6e6c7920676f7665726e616e636520616c6c6040820152631bddd95960e21b606082015260800190565b60208082526032908201527f5374616b696e67506f6f6c3a2076616c7565206d757374206265206772656174604082015271195c881d1a185b881b5a5b88185b5bdd5b9d60721b606082015260800190565b8082028115828204841417612618576126186125f1565b5f808335601e19843603018112612781575f80fd5b8301803591506001600160401b0382111561279a575f80fd5b6020019150368190038213156122b9575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b606081525f6127e96060830187896127ae565b82810360208401526127fc8186886127ae565b9150508260408301529695505050505050565b5f82515f5b8181101561282e5760208186018101518583015201612814565b505f920191825250919050565b5f808335601e19843603018112612850575f80fd5b83016020810192503590506001600160401b0381111561286e575f80fd5b8036038213156122b9575f80fd5b8183525f6020808501808196508560051b81019150845f5b878110156128ca5782840389526128ab828861283b565b6128b68682846127ae565b9a87019a9550505090840190600101612894565b5091979650505050505050565b602081525f6121ef60208301848661287c565b606080825284519082018190525f906020906080840190828801845b8281101561292b5781516001600160a01b031684529284019290840190600101612906565b5050508381038285015261293f81876120c4565b9250505060018060a01b0383166040830152949350505050565b8183525f6001600160fb1b03831115612970575f80fd5b8260051b80836020870137939093016020019392505050565b8183525f6020808501808196506005915085821b8101855f5b88811015612a0b578383038a528135601e198936030181126129c2575f80fd5b880186810190356001600160401b038111156129dc575f80fd5b80871b36038213156129ec575f80fd5b6129f7858284612959565b9b88019b94505050908501906001016129a2565b509098975050505050505050565b6001600160401b03891681525f602060a081840152893560a0840152612a41818b018b61283b565b604060c0860152612a5660e0860182846127ae565b85810360408701528a81528b9250830190505f805b8b811015612a9b57833564ffffffffff8116808214612a88578384fd5b8452509284019291840191600101612a6b565b50508481036060860152612ab081898b61287c565b925050508281036080840152612ac7818587612989565b9b9a5050505050505050505050565b604080825283519082018190525f906020906060840190828701845b82811015612b175781516001600160a01b031684529284019290840190600101612af2565b50505083810382850152612b2b81866120c4565b9695505050505050565b80820180821115612618576126186125f156fea2646970667358221220010b4a4835da0853e7f9611003b42a14186eaf4d77b2ef141c9cb30c7583e72d64736f6c63430008140033",
}

var ContractABI = ContractMetaData.ABI

var ContractBin = ContractMetaData.Bin

func DeployContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Contract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Contract{ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

type Contract struct {
	address common.Address
	abi     abi.ABI
	ContractCaller
	ContractTransactor
	ContractFilterer
}

type ContractCaller struct {
	contract *bind.BoundContract
}

type ContractTransactor struct {
	contract *bind.BoundContract
}

type ContractFilterer struct {
	contract *bind.BoundContract
}

type ContractSession struct {
	Contract     *Contract
	CallOpts     bind.CallOpts
	TransactOpts bind.TransactOpts
}

type ContractCallerSession struct {
	Contract *ContractCaller
	CallOpts bind.CallOpts
}

type ContractTransactorSession struct {
	Contract     *ContractTransactor
	TransactOpts bind.TransactOpts
}

type ContractRaw struct {
	Contract *Contract
}

type ContractCallerRaw struct {
	Contract *ContractCaller
}

type ContractTransactorRaw struct {
	Contract *ContractTransactor
}

func NewContract(address common.Address, backend bind.ContractBackend) (*Contract, error) {
	abi, err := abi.JSON(strings.NewReader(ContractABI))
	if err != nil {
		return nil, err
	}
	contract, err := bindContract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Contract{address: address, abi: abi, ContractCaller: ContractCaller{contract: contract}, ContractTransactor: ContractTransactor{contract: contract}, ContractFilterer: ContractFilterer{contract: contract}}, nil
}

func NewContractCaller(address common.Address, caller bind.ContractCaller) (*ContractCaller, error) {
	contract, err := bindContract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractCaller{contract: contract}, nil
}

func NewContractTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractTransactor, error) {
	contract, err := bindContract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractTransactor{contract: contract}, nil
}

func NewContractFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractFilterer, error) {
	contract, err := bindContract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractFilterer{contract: contract}, nil
}

func bindContract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

func (_Contract *ContractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.ContractCaller.contract.Call(opts, result, method, params...)
}

func (_Contract *ContractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transfer(opts)
}

func (_Contract *ContractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.ContractTransactor.contract.Transact(opts, method, params...)
}

func (_Contract *ContractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Contract.Contract.contract.Call(opts, result, method, params...)
}

func (_Contract *ContractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transfer(opts)
}

func (_Contract *ContractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Contract.Contract.contract.Transact(opts, method, params...)
}

func (_Contract *ContractCaller) CALLGASLIMIT(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "CALL_GAS_LIMIT")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) CALLGASLIMIT() (*big.Int, error) {
	return _Contract.Contract.CALLGASLIMIT(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) CALLGASLIMIT() (*big.Int, error) {
	return _Contract.Contract.CALLGASLIMIT(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) ClaimableOf(opts *bind.CallOpts, claimer common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "claimableOf", claimer)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) ClaimableOf(claimer common.Address) (*big.Int, error) {
	return _Contract.Contract.ClaimableOf(&_Contract.CallOpts, claimer)
}

func (_Contract *ContractCallerSession) ClaimableOf(claimer common.Address) (*big.Int, error) {
	return _Contract.Contract.ClaimableOf(&_Contract.CallOpts, claimer)
}

func (_Contract *ContractCaller) GetCert(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getCert")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Contract *ContractSession) GetCert() (common.Address, error) {
	return _Contract.Contract.GetCert(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) GetCert() (common.Address, error) {
	return _Contract.Contract.GetCert(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) GetEigenPodManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getEigenPodManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

func (_Contract *ContractSession) GetEigenPodManager() (common.Address, error) {
	return _Contract.Contract.GetEigenPodManager(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) GetEigenPodManager() (common.Address, error) {
	return _Contract.Contract.GetEigenPodManager(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) GetFreeBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getFreeBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) GetFreeBalance() (*big.Int, error) {
	return _Contract.Contract.GetFreeBalance(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) GetFreeBalance() (*big.Int, error) {
	return _Contract.Contract.GetFreeBalance(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) GetMinStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getMinStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) GetMinStake() (*big.Int, error) {
	return _Contract.Contract.GetMinStake(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) GetMinStake() (*big.Int, error) {
	return _Contract.Contract.GetMinStake(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) GetMinUnstake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getMinUnstake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) GetMinUnstake() (*big.Int, error) {
	return _Contract.Contract.GetMinUnstake(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) GetMinUnstake() (*big.Int, error) {
	return _Contract.Contract.GetMinUnstake(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) GetPending(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getPending")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) GetPending() (*big.Int, error) {
	return _Contract.Contract.GetPending(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) GetPending() (*big.Int, error) {
	return _Contract.Contract.GetPending(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) GetPendingRequestsOf(opts *bind.CallOpts, claimer common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getPendingRequestsOf", claimer)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

func (_Contract *ContractSession) GetPendingRequestsOf(claimer common.Address) ([]*big.Int, error) {
	return _Contract.Contract.GetPendingRequestsOf(&_Contract.CallOpts, claimer)
}

func (_Contract *ContractCallerSession) GetPendingRequestsOf(claimer common.Address) ([]*big.Int, error) {
	return _Contract.Contract.GetPendingRequestsOf(&_Contract.CallOpts, claimer)
}

func (_Contract *ContractCaller) GetPendingUnstakesOf(opts *bind.CallOpts, claimer common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getPendingUnstakesOf", claimer)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) GetPendingUnstakesOf(claimer common.Address) (*big.Int, error) {
	return _Contract.Contract.GetPendingUnstakesOf(&_Contract.CallOpts, claimer)
}

func (_Contract *ContractCallerSession) GetPendingUnstakesOf(claimer common.Address) (*big.Int, error) {
	return _Contract.Contract.GetPendingUnstakesOf(&_Contract.CallOpts, claimer)
}

func (_Contract *ContractCaller) GetTotalClaimable(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTotalClaimable")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) GetTotalClaimable() (*big.Int, error) {
	return _Contract.Contract.GetTotalClaimable(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) GetTotalClaimable() (*big.Int, error) {
	return _Contract.Contract.GetTotalClaimable(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) GetTotalPendingUnstakes(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "getTotalPendingUnstakes")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

func (_Contract *ContractSession) GetTotalPendingUnstakes() (*big.Int, error) {
	return _Contract.Contract.GetTotalPendingUnstakes(&_Contract.CallOpts)
}

func (_Contract *ContractCallerSession) GetTotalPendingUnstakes() (*big.Int, error) {
	return _Contract.Contract.GetTotalPendingUnstakes(&_Contract.CallOpts)
}

func (_Contract *ContractCaller) HasClaimable(opts *bind.CallOpts, claimer common.Address) (bool, error) {
	var out []interface{}
	err := _Contract.contract.Call(opts, &out, "hasClaimable", claimer)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

func (_Contract *ContractSession) HasClaimable(claimer common.Address) (bool, error) {
	return _Contract.Contract.HasClaimable(&_Contract.CallOpts, claimer)
}

func (_Contract *ContractCallerSession) HasClaimable(claimer common.Address) (bool, error) {
	return _Contract.Contract.HasClaimable(&_Contract.CallOpts, claimer)
}

func (_Contract *ContractTransactor) ActivateRestaking(opts *bind.TransactOpts, provider string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "activateRestaking", provider)
}

func (_Contract *ContractSession) ActivateRestaking(provider string) (*types.Transaction, error) {
	return _Contract.Contract.ActivateRestaking(&_Contract.TransactOpts, provider)
}

func (_Contract *ContractTransactorSession) ActivateRestaking(provider string) (*types.Transaction, error) {
	return _Contract.Contract.ActivateRestaking(&_Contract.TransactOpts, provider)
}

func (_Contract *ContractTransactor) AddRestaker(opts *bind.TransactOpts, provider string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "addRestaker", provider)
}

func (_Contract *ContractSession) AddRestaker(provider string) (*types.Transaction, error) {
	return _Contract.Contract.AddRestaker(&_Contract.TransactOpts, provider)
}

func (_Contract *ContractTransactorSession) AddRestaker(provider string) (*types.Transaction, error) {
	return _Contract.Contract.AddRestaker(&_Contract.TransactOpts, provider)
}

func (_Contract *ContractTransactor) BatchDeposit(opts *bind.TransactOpts, provider string, pubkeys [][]byte, signatures [][]byte, deposit_data_roots [][32]byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "batchDeposit", provider, pubkeys, signatures, deposit_data_roots)
}

func (_Contract *ContractSession) BatchDeposit(provider string, pubkeys [][]byte, signatures [][]byte, deposit_data_roots [][32]byte) (*types.Transaction, error) {
	return _Contract.Contract.BatchDeposit(&_Contract.TransactOpts, provider, pubkeys, signatures, deposit_data_roots)
}

func (_Contract *ContractTransactorSession) BatchDeposit(provider string, pubkeys [][]byte, signatures [][]byte, deposit_data_roots [][32]byte) (*types.Transaction, error) {
	return _Contract.Contract.BatchDeposit(&_Contract.TransactOpts, provider, pubkeys, signatures, deposit_data_roots)
}

func (_Contract *ContractTransactor) ClaimUnstake(opts *bind.TransactOpts, claimer common.Address) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "claimUnstake", claimer)
}

func (_Contract *ContractSession) ClaimUnstake(claimer common.Address) (*types.Transaction, error) {
	return _Contract.Contract.ClaimUnstake(&_Contract.TransactOpts, claimer)
}

func (_Contract *ContractTransactorSession) ClaimUnstake(claimer common.Address) (*types.Transaction, error) {
	return _Contract.Contract.ClaimUnstake(&_Contract.TransactOpts, claimer)
}

func (_Contract *ContractTransactor) DistributeUnstakes(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "distributeUnstakes")
}

func (_Contract *ContractSession) DistributeUnstakes() (*types.Transaction, error) {
	return _Contract.Contract.DistributeUnstakes(&_Contract.TransactOpts)
}

func (_Contract *ContractTransactorSession) DistributeUnstakes() (*types.Transaction, error) {
	return _Contract.Contract.DistributeUnstakes(&_Contract.TransactOpts)
}

func (_Contract *ContractTransactor) Initialize(opts *bind.TransactOpts, stakingConfig common.Address, distributeGasLimit *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "initialize", stakingConfig, distributeGasLimit)
}

func (_Contract *ContractSession) Initialize(stakingConfig common.Address, distributeGasLimit *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Initialize(&_Contract.TransactOpts, stakingConfig, distributeGasLimit)
}

func (_Contract *ContractTransactorSession) Initialize(stakingConfig common.Address, distributeGasLimit *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Initialize(&_Contract.TransactOpts, stakingConfig, distributeGasLimit)
}

func (_Contract *ContractTransactor) RecoverTokens(opts *bind.TransactOpts, provider string, tokenList []common.Address, amountsToWithdraw []*big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "recoverTokens", provider, tokenList, amountsToWithdraw)
}

func (_Contract *ContractSession) RecoverTokens(provider string, tokenList []common.Address, amountsToWithdraw []*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.RecoverTokens(&_Contract.TransactOpts, provider, tokenList, amountsToWithdraw)
}

func (_Contract *ContractTransactorSession) RecoverTokens(provider string, tokenList []common.Address, amountsToWithdraw []*big.Int) (*types.Transaction, error) {
	return _Contract.Contract.RecoverTokens(&_Contract.TransactOpts, provider, tokenList, amountsToWithdraw)
}

func (_Contract *ContractTransactor) SetDistributeGasLimit(opts *bind.TransactOpts, newValue *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "setDistributeGasLimit", newValue)
}

func (_Contract *ContractSession) SetDistributeGasLimit(newValue *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SetDistributeGasLimit(&_Contract.TransactOpts, newValue)
}

func (_Contract *ContractTransactorSession) SetDistributeGasLimit(newValue *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.SetDistributeGasLimit(&_Contract.TransactOpts, newValue)
}

func (_Contract *ContractTransactor) Stake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "stake")
}

func (_Contract *ContractSession) Stake() (*types.Transaction, error) {
	return _Contract.Contract.Stake(&_Contract.TransactOpts)
}

func (_Contract *ContractTransactorSession) Stake() (*types.Transaction, error) {
	return _Contract.Contract.Stake(&_Contract.TransactOpts)
}

func (_Contract *ContractTransactor) StakeCerts(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "stakeCerts")
}

func (_Contract *ContractSession) StakeCerts() (*types.Transaction, error) {
	return _Contract.Contract.StakeCerts(&_Contract.TransactOpts)
}

func (_Contract *ContractTransactorSession) StakeCerts() (*types.Transaction, error) {
	return _Contract.Contract.StakeCerts(&_Contract.TransactOpts)
}

func (_Contract *ContractTransactor) Unstake(opts *bind.TransactOpts, to common.Address, shares *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "unstake", to, shares)
}

func (_Contract *ContractSession) Unstake(to common.Address, shares *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Unstake(&_Contract.TransactOpts, to, shares)
}

func (_Contract *ContractTransactorSession) Unstake(to common.Address, shares *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.Unstake(&_Contract.TransactOpts, to, shares)
}

func (_Contract *ContractTransactor) UnstakeCerts(opts *bind.TransactOpts, receiverAddress common.Address, shares *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "unstakeCerts", receiverAddress, shares)
}

func (_Contract *ContractSession) UnstakeCerts(receiverAddress common.Address, shares *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.UnstakeCerts(&_Contract.TransactOpts, receiverAddress, shares)
}

func (_Contract *ContractTransactorSession) UnstakeCerts(receiverAddress common.Address, shares *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.UnstakeCerts(&_Contract.TransactOpts, receiverAddress, shares)
}

func (_Contract *ContractTransactor) VerifyWithdrawalCredentials(opts *bind.TransactOpts, provider string, oracleTimestamp uint64, stateRootProof BeaconChainProofsStateRootProof, validatorIndices []*big.Int, validatorFieldsProofs [][]byte, validatorFields [][][32]byte) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "verifyWithdrawalCredentials", provider, oracleTimestamp, stateRootProof, validatorIndices, validatorFieldsProofs, validatorFields)
}

func (_Contract *ContractSession) VerifyWithdrawalCredentials(provider string, oracleTimestamp uint64, stateRootProof BeaconChainProofsStateRootProof, validatorIndices []*big.Int, validatorFieldsProofs [][]byte, validatorFields [][][32]byte) (*types.Transaction, error) {
	return _Contract.Contract.VerifyWithdrawalCredentials(&_Contract.TransactOpts, provider, oracleTimestamp, stateRootProof, validatorIndices, validatorFieldsProofs, validatorFields)
}

func (_Contract *ContractTransactorSession) VerifyWithdrawalCredentials(provider string, oracleTimestamp uint64, stateRootProof BeaconChainProofsStateRootProof, validatorIndices []*big.Int, validatorFieldsProofs [][]byte, validatorFields [][][32]byte) (*types.Transaction, error) {
	return _Contract.Contract.VerifyWithdrawalCredentials(&_Contract.TransactOpts, provider, oracleTimestamp, stateRootProof, validatorIndices, validatorFieldsProofs, validatorFields)
}

func (_Contract *ContractTransactor) WithdrawBeforeRestaking(opts *bind.TransactOpts, provider string) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "withdrawBeforeRestaking", provider)
}

func (_Contract *ContractSession) WithdrawBeforeRestaking(provider string) (*types.Transaction, error) {
	return _Contract.Contract.WithdrawBeforeRestaking(&_Contract.TransactOpts, provider)
}

func (_Contract *ContractTransactorSession) WithdrawBeforeRestaking(provider string) (*types.Transaction, error) {
	return _Contract.Contract.WithdrawBeforeRestaking(&_Contract.TransactOpts, provider)
}

func (_Contract *ContractTransactor) WithdrawNonBeaconChainETHBalanceWei(opts *bind.TransactOpts, provider string, amountToWithdraw *big.Int) (*types.Transaction, error) {
	return _Contract.contract.Transact(opts, "withdrawNonBeaconChainETHBalanceWei", provider, amountToWithdraw)
}

func (_Contract *ContractSession) WithdrawNonBeaconChainETHBalanceWei(provider string, amountToWithdraw *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.WithdrawNonBeaconChainETHBalanceWei(&_Contract.TransactOpts, provider, amountToWithdraw)
}

func (_Contract *ContractTransactorSession) WithdrawNonBeaconChainETHBalanceWei(provider string, amountToWithdraw *big.Int) (*types.Transaction, error) {
	return _Contract.Contract.WithdrawNonBeaconChainETHBalanceWei(&_Contract.TransactOpts, provider, amountToWithdraw)
}

type ContractClaimExpectedIterator struct {
	Event *ContractClaimExpected

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractClaimExpectedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractClaimExpected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractClaimExpected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractClaimExpectedIterator) Error() error {
	return it.fail
}

func (it *ContractClaimExpectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractClaimExpected struct {
	Claimer common.Address
	Value   *big.Int
	Raw     types.Log
}

func (_Contract *ContractFilterer) FilterClaimExpected(opts *bind.FilterOpts, claimer []common.Address) (*ContractClaimExpectedIterator, error) {

	var claimerRule []interface{}
	for _, claimerItem := range claimer {
		claimerRule = append(claimerRule, claimerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "ClaimExpected", claimerRule)
	if err != nil {
		return nil, err
	}
	return &ContractClaimExpectedIterator{contract: _Contract.contract, event: "ClaimExpected", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchClaimExpected(opts *bind.WatchOpts, sink chan<- *ContractClaimExpected, claimer []common.Address) (event.Subscription, error) {

	var claimerRule []interface{}
	for _, claimerItem := range claimer {
		claimerRule = append(claimerRule, claimerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "ClaimExpected", claimerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractClaimExpected)
				if err := _Contract.contract.UnpackLog(event, "ClaimExpected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseClaimExpected(log types.Log) (*ContractClaimExpected, error) {
	event := new(ContractClaimExpected)
	if err := _Contract.contract.UnpackLog(event, "ClaimExpected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractDepositedIterator struct {
	Event *ContractDeposited

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractDepositedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractDepositedIterator) Error() error {
	return it.fail
}

func (it *ContractDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractDeposited struct {
	Provider common.Hash
	Pubkeys  [][]byte
	Raw      types.Log
}

func (_Contract *ContractFilterer) FilterDeposited(opts *bind.FilterOpts, provider []string) (*ContractDepositedIterator, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Deposited", providerRule)
	if err != nil {
		return nil, err
	}
	return &ContractDepositedIterator{contract: _Contract.contract, event: "Deposited", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchDeposited(opts *bind.WatchOpts, sink chan<- *ContractDeposited, provider []string) (event.Subscription, error) {

	var providerRule []interface{}
	for _, providerItem := range provider {
		providerRule = append(providerRule, providerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Deposited", providerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractDeposited)
				if err := _Contract.contract.UnpackLog(event, "Deposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseDeposited(log types.Log) (*ContractDeposited, error) {
	event := new(ContractDeposited)
	if err := _Contract.contract.UnpackLog(event, "Deposited", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractDistributeGasLimitChangedIterator struct {
	Event *ContractDistributeGasLimitChanged

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractDistributeGasLimitChangedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractDistributeGasLimitChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractDistributeGasLimitChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractDistributeGasLimitChangedIterator) Error() error {
	return it.fail
}

func (it *ContractDistributeGasLimitChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractDistributeGasLimitChanged struct {
	PrevValue uint32
	NewValue  uint32
	Raw       types.Log
}

func (_Contract *ContractFilterer) FilterDistributeGasLimitChanged(opts *bind.FilterOpts) (*ContractDistributeGasLimitChangedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "DistributeGasLimitChanged")
	if err != nil {
		return nil, err
	}
	return &ContractDistributeGasLimitChangedIterator{contract: _Contract.contract, event: "DistributeGasLimitChanged", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchDistributeGasLimitChanged(opts *bind.WatchOpts, sink chan<- *ContractDistributeGasLimitChanged) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "DistributeGasLimitChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractDistributeGasLimitChanged)
				if err := _Contract.contract.UnpackLog(event, "DistributeGasLimitChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseDistributeGasLimitChanged(log types.Log) (*ContractDistributeGasLimitChanged, error) {
	event := new(ContractDistributeGasLimitChanged)
	if err := _Contract.contract.UnpackLog(event, "DistributeGasLimitChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractInitializedIterator struct {
	Event *ContractInitialized

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractInitializedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractInitializedIterator) Error() error {
	return it.fail
}

func (it *ContractInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractInitialized struct {
	Version uint8
	Raw     types.Log
}

func (_Contract *ContractFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractInitializedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractInitializedIterator{contract: _Contract.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractInitialized) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractInitialized)
				if err := _Contract.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseInitialized(log types.Log) (*ContractInitialized, error) {
	event := new(ContractInitialized)
	if err := _Contract.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractPendingUnstakeIterator struct {
	Event *ContractPendingUnstake

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractPendingUnstakeIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractPendingUnstake)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractPendingUnstake)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractPendingUnstakeIterator) Error() error {
	return it.fail
}

func (it *ContractPendingUnstakeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractPendingUnstake struct {
	OwnerAddress    common.Address
	ReceiverAddress common.Address
	Amount          *big.Int
	Shares          *big.Int
	Raw             types.Log
}

func (_Contract *ContractFilterer) FilterPendingUnstake(opts *bind.FilterOpts, ownerAddress []common.Address, receiverAddress []common.Address) (*ContractPendingUnstakeIterator, error) {

	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}
	var receiverAddressRule []interface{}
	for _, receiverAddressItem := range receiverAddress {
		receiverAddressRule = append(receiverAddressRule, receiverAddressItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "PendingUnstake", ownerAddressRule, receiverAddressRule)
	if err != nil {
		return nil, err
	}
	return &ContractPendingUnstakeIterator{contract: _Contract.contract, event: "PendingUnstake", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchPendingUnstake(opts *bind.WatchOpts, sink chan<- *ContractPendingUnstake, ownerAddress []common.Address, receiverAddress []common.Address) (event.Subscription, error) {

	var ownerAddressRule []interface{}
	for _, ownerAddressItem := range ownerAddress {
		ownerAddressRule = append(ownerAddressRule, ownerAddressItem)
	}
	var receiverAddressRule []interface{}
	for _, receiverAddressItem := range receiverAddress {
		receiverAddressRule = append(receiverAddressRule, receiverAddressItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "PendingUnstake", ownerAddressRule, receiverAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractPendingUnstake)
				if err := _Contract.contract.UnpackLog(event, "PendingUnstake", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParsePendingUnstake(log types.Log) (*ContractPendingUnstake, error) {
	event := new(ContractPendingUnstake)
	if err := _Contract.contract.UnpackLog(event, "PendingUnstake", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractReceivedIterator struct {
	Event *ContractReceived

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractReceivedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractReceivedIterator) Error() error {
	return it.fail
}

func (it *ContractReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractReceived struct {
	Sender common.Address
	Amount *big.Int
	Raw    types.Log
}

func (_Contract *ContractFilterer) FilterReceived(opts *bind.FilterOpts, sender []common.Address) (*ContractReceivedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Received", senderRule)
	if err != nil {
		return nil, err
	}
	return &ContractReceivedIterator{contract: _Contract.contract, event: "Received", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchReceived(opts *bind.WatchOpts, sink chan<- *ContractReceived, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Received", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractReceived)
				if err := _Contract.contract.UnpackLog(event, "Received", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseReceived(log types.Log) (*ContractReceived, error) {
	event := new(ContractReceived)
	if err := _Contract.contract.UnpackLog(event, "Received", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractRewardsDistributedIterator struct {
	Event *ContractRewardsDistributed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractRewardsDistributedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractRewardsDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractRewardsDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractRewardsDistributedIterator) Error() error {
	return it.fail
}

func (it *ContractRewardsDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractRewardsDistributed struct {
	Claimers []common.Address
	Amounts  []*big.Int
	Raw      types.Log
}

func (_Contract *ContractFilterer) FilterRewardsDistributed(opts *bind.FilterOpts) (*ContractRewardsDistributedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "RewardsDistributed")
	if err != nil {
		return nil, err
	}
	return &ContractRewardsDistributedIterator{contract: _Contract.contract, event: "RewardsDistributed", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchRewardsDistributed(opts *bind.WatchOpts, sink chan<- *ContractRewardsDistributed) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "RewardsDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractRewardsDistributed)
				if err := _Contract.contract.UnpackLog(event, "RewardsDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseRewardsDistributed(log types.Log) (*ContractRewardsDistributed, error) {
	event := new(ContractRewardsDistributed)
	if err := _Contract.contract.UnpackLog(event, "RewardsDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractStakedIterator struct {
	Event *ContractStaked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractStakedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractStakedIterator) Error() error {
	return it.fail
}

func (it *ContractStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractStaked struct {
	Staker common.Address
	Amount *big.Int
	Shares *big.Int
	Raw    types.Log
}

func (_Contract *ContractFilterer) FilterStaked(opts *bind.FilterOpts, staker []common.Address) (*ContractStakedIterator, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Staked", stakerRule)
	if err != nil {
		return nil, err
	}
	return &ContractStakedIterator{contract: _Contract.contract, event: "Staked", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *ContractStaked, staker []common.Address) (event.Subscription, error) {

	var stakerRule []interface{}
	for _, stakerItem := range staker {
		stakerRule = append(stakerRule, stakerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Staked", stakerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractStaked)
				if err := _Contract.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseStaked(log types.Log) (*ContractStaked, error) {
	event := new(ContractStaked)
	if err := _Contract.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractUnstakeClaimedIterator struct {
	Event *ContractUnstakeClaimed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractUnstakeClaimedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractUnstakeClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractUnstakeClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractUnstakeClaimedIterator) Error() error {
	return it.fail
}

func (it *ContractUnstakeClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractUnstakeClaimed struct {
	Claimer common.Address
	Caller  common.Address
	Value   *big.Int
	Raw     types.Log
}

func (_Contract *ContractFilterer) FilterUnstakeClaimed(opts *bind.FilterOpts, claimer []common.Address, caller []common.Address) (*ContractUnstakeClaimedIterator, error) {

	var claimerRule []interface{}
	for _, claimerItem := range claimer {
		claimerRule = append(claimerRule, claimerItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "UnstakeClaimed", claimerRule, callerRule)
	if err != nil {
		return nil, err
	}
	return &ContractUnstakeClaimedIterator{contract: _Contract.contract, event: "UnstakeClaimed", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchUnstakeClaimed(opts *bind.WatchOpts, sink chan<- *ContractUnstakeClaimed, claimer []common.Address, caller []common.Address) (event.Subscription, error) {

	var claimerRule []interface{}
	for _, claimerItem := range claimer {
		claimerRule = append(claimerRule, claimerItem)
	}
	var callerRule []interface{}
	for _, callerItem := range caller {
		callerRule = append(callerRule, callerItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "UnstakeClaimed", claimerRule, callerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractUnstakeClaimed)
				if err := _Contract.contract.UnpackLog(event, "UnstakeClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseUnstakeClaimed(log types.Log) (*ContractUnstakeClaimed, error) {
	event := new(ContractUnstakeClaimed)
	if err := _Contract.contract.UnpackLog(event, "UnstakeClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractUnstakedIterator struct {
	Event *ContractUnstaked

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractUnstakedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractUnstakedIterator) Error() error {
	return it.fail
}

func (it *ContractUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractUnstaked struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
	Shares *big.Int
	Raw    types.Log
}

func (_Contract *ContractFilterer) FilterUnstaked(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ContractUnstakedIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contract.contract.FilterLogs(opts, "Unstaked", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ContractUnstakedIterator{contract: _Contract.contract, event: "Unstaked", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchUnstaked(opts *bind.WatchOpts, sink chan<- *ContractUnstaked, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Contract.contract.WatchLogs(opts, "Unstaked", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractUnstaked)
				if err := _Contract.contract.UnpackLog(event, "Unstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseUnstaked(log types.Log) (*ContractUnstaked, error) {
	event := new(ContractUnstaked)
	if err := _Contract.contract.UnpackLog(event, "Unstaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

type ContractUnstakesDistributedIterator struct {
	Event *ContractUnstakesDistributed

	contract *bind.BoundContract
	event    string

	logs chan types.Log
	sub  ethereum.Subscription
	done bool
	fail error
}

func (it *ContractUnstakesDistributedIterator) Next() bool {

	if it.fail != nil {
		return false
	}

	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractUnstakesDistributed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}

	select {
	case log := <-it.logs:
		it.Event = new(ContractUnstakesDistributed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

func (it *ContractUnstakesDistributedIterator) Error() error {
	return it.fail
}

func (it *ContractUnstakesDistributedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

type ContractUnstakesDistributed struct {
	Unstakes []IRestakingPoolUnstake
	Raw      types.Log
}

func (_Contract *ContractFilterer) FilterUnstakesDistributed(opts *bind.FilterOpts) (*ContractUnstakesDistributedIterator, error) {

	logs, sub, err := _Contract.contract.FilterLogs(opts, "UnstakesDistributed")
	if err != nil {
		return nil, err
	}
	return &ContractUnstakesDistributedIterator{contract: _Contract.contract, event: "UnstakesDistributed", logs: logs, sub: sub}, nil
}

func (_Contract *ContractFilterer) WatchUnstakesDistributed(opts *bind.WatchOpts, sink chan<- *ContractUnstakesDistributed) (event.Subscription, error) {

	logs, sub, err := _Contract.contract.WatchLogs(opts, "UnstakesDistributed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:

				event := new(ContractUnstakesDistributed)
				if err := _Contract.contract.UnpackLog(event, "UnstakesDistributed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

func (_Contract *ContractFilterer) ParseUnstakesDistributed(log types.Log) (*ContractUnstakesDistributed, error) {
	event := new(ContractUnstakesDistributed)
	if err := _Contract.contract.UnpackLog(event, "UnstakesDistributed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

func (_Contract *Contract) ParseLog(log types.Log) (generated.AbigenLog, error) {
	switch log.Topics[0] {
	case _Contract.abi.Events["ClaimExpected"].ID:
		return _Contract.ParseClaimExpected(log)
	case _Contract.abi.Events["Deposited"].ID:
		return _Contract.ParseDeposited(log)
	case _Contract.abi.Events["DistributeGasLimitChanged"].ID:
		return _Contract.ParseDistributeGasLimitChanged(log)
	case _Contract.abi.Events["Initialized"].ID:
		return _Contract.ParseInitialized(log)
	case _Contract.abi.Events["PendingUnstake"].ID:
		return _Contract.ParsePendingUnstake(log)
	case _Contract.abi.Events["Received"].ID:
		return _Contract.ParseReceived(log)
	case _Contract.abi.Events["RewardsDistributed"].ID:
		return _Contract.ParseRewardsDistributed(log)
	case _Contract.abi.Events["Staked"].ID:
		return _Contract.ParseStaked(log)
	case _Contract.abi.Events["UnstakeClaimed"].ID:
		return _Contract.ParseUnstakeClaimed(log)
	case _Contract.abi.Events["Unstaked"].ID:
		return _Contract.ParseUnstaked(log)
	case _Contract.abi.Events["UnstakesDistributed"].ID:
		return _Contract.ParseUnstakesDistributed(log)

	default:
		return nil, fmt.Errorf("abigen wrapper received unknown log topic: %v", log.Topics[0])
	}
}

func (ContractClaimExpected) Topic() common.Hash {
	return common.HexToHash("0xf4426c1412b22225874f3898e67e34c12ba628bff6d89fd87ba593927a80b421")
}

func (ContractDeposited) Topic() common.Hash {
	return common.HexToHash("0x82893d4437db377df0abca554a4a9ef54de226c99efe74077b214d6d3390e7dd")
}

func (ContractDistributeGasLimitChanged) Topic() common.Hash {
	return common.HexToHash("0x55c1474264b8038534b3e34b09a3a99d1f3436634d4e34fa13cea4c33c9a832e")
}

func (ContractInitialized) Topic() common.Hash {
	return common.HexToHash("0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498")
}

func (ContractPendingUnstake) Topic() common.Hash {
	return common.HexToHash("0xe8f73d529f5ced08581a2c18456a6530dbd0dddf94d8c98e0ab8f9883e2f4482")
}

func (ContractReceived) Topic() common.Hash {
	return common.HexToHash("0x88a5966d370b9919b20f3e2c13ff65706f196a4e32cc2c12bf57088f88525874")
}

func (ContractRewardsDistributed) Topic() common.Hash {
	return common.HexToHash("0xe69d325558610ba73c441901deb46d7f251108348dc5dc9447e8866774c12edc")
}

func (ContractStaked) Topic() common.Hash {
	return common.HexToHash("0x1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90")
}

func (ContractUnstakeClaimed) Topic() common.Hash {
	return common.HexToHash("0xebc6a30f46090cafd1f043241dbc148c4310b7026aae29ff950ea25a5411879b")
}

func (ContractUnstaked) Topic() common.Hash {
	return common.HexToHash("0x06cc7e90b4f2b554a9614b0caa84f909f3498c820ae47c731f490c28c07f7d3b")
}

func (ContractUnstakesDistributed) Topic() common.Hash {
	return common.HexToHash("0xdb6e8b10a6c30551abbedf583209f3ba034b0fe65db6848390a5af4816a2eaa0")
}

func (_Contract *Contract) Address() common.Address {
	return _Contract.address
}

type ContractInterface interface {
	CALLGASLIMIT(opts *bind.CallOpts) (*big.Int, error)

	ClaimableOf(opts *bind.CallOpts, claimer common.Address) (*big.Int, error)

	GetCert(opts *bind.CallOpts) (common.Address, error)

	GetEigenPodManager(opts *bind.CallOpts) (common.Address, error)

	GetFreeBalance(opts *bind.CallOpts) (*big.Int, error)

	GetMinStake(opts *bind.CallOpts) (*big.Int, error)

	GetMinUnstake(opts *bind.CallOpts) (*big.Int, error)

	GetPending(opts *bind.CallOpts) (*big.Int, error)

	GetPendingRequestsOf(opts *bind.CallOpts, claimer common.Address) ([]*big.Int, error)

	GetPendingUnstakesOf(opts *bind.CallOpts, claimer common.Address) (*big.Int, error)

	GetTotalClaimable(opts *bind.CallOpts) (*big.Int, error)

	GetTotalPendingUnstakes(opts *bind.CallOpts) (*big.Int, error)

	HasClaimable(opts *bind.CallOpts, claimer common.Address) (bool, error)

	ActivateRestaking(opts *bind.TransactOpts, provider string) (*types.Transaction, error)

	AddRestaker(opts *bind.TransactOpts, provider string) (*types.Transaction, error)

	BatchDeposit(opts *bind.TransactOpts, provider string, pubkeys [][]byte, signatures [][]byte, deposit_data_roots [][32]byte) (*types.Transaction, error)

	ClaimUnstake(opts *bind.TransactOpts, claimer common.Address) (*types.Transaction, error)

	DistributeUnstakes(opts *bind.TransactOpts) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts, stakingConfig common.Address, distributeGasLimit *big.Int) (*types.Transaction, error)

	RecoverTokens(opts *bind.TransactOpts, provider string, tokenList []common.Address, amountsToWithdraw []*big.Int) (*types.Transaction, error)

	SetDistributeGasLimit(opts *bind.TransactOpts, newValue *big.Int) (*types.Transaction, error)

	Stake(opts *bind.TransactOpts) (*types.Transaction, error)

	StakeCerts(opts *bind.TransactOpts) (*types.Transaction, error)

	Unstake(opts *bind.TransactOpts, to common.Address, shares *big.Int) (*types.Transaction, error)

	UnstakeCerts(opts *bind.TransactOpts, receiverAddress common.Address, shares *big.Int) (*types.Transaction, error)

	VerifyWithdrawalCredentials(opts *bind.TransactOpts, provider string, oracleTimestamp uint64, stateRootProof BeaconChainProofsStateRootProof, validatorIndices []*big.Int, validatorFieldsProofs [][]byte, validatorFields [][][32]byte) (*types.Transaction, error)

	WithdrawBeforeRestaking(opts *bind.TransactOpts, provider string) (*types.Transaction, error)

	WithdrawNonBeaconChainETHBalanceWei(opts *bind.TransactOpts, provider string, amountToWithdraw *big.Int) (*types.Transaction, error)

	FilterClaimExpected(opts *bind.FilterOpts, claimer []common.Address) (*ContractClaimExpectedIterator, error)

	WatchClaimExpected(opts *bind.WatchOpts, sink chan<- *ContractClaimExpected, claimer []common.Address) (event.Subscription, error)

	ParseClaimExpected(log types.Log) (*ContractClaimExpected, error)

	FilterDeposited(opts *bind.FilterOpts, provider []string) (*ContractDepositedIterator, error)

	WatchDeposited(opts *bind.WatchOpts, sink chan<- *ContractDeposited, provider []string) (event.Subscription, error)

	ParseDeposited(log types.Log) (*ContractDeposited, error)

	FilterDistributeGasLimitChanged(opts *bind.FilterOpts) (*ContractDistributeGasLimitChangedIterator, error)

	WatchDistributeGasLimitChanged(opts *bind.WatchOpts, sink chan<- *ContractDistributeGasLimitChanged) (event.Subscription, error)

	ParseDistributeGasLimitChanged(log types.Log) (*ContractDistributeGasLimitChanged, error)

	FilterInitialized(opts *bind.FilterOpts) (*ContractInitializedIterator, error)

	WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractInitialized) (event.Subscription, error)

	ParseInitialized(log types.Log) (*ContractInitialized, error)

	FilterPendingUnstake(opts *bind.FilterOpts, ownerAddress []common.Address, receiverAddress []common.Address) (*ContractPendingUnstakeIterator, error)

	WatchPendingUnstake(opts *bind.WatchOpts, sink chan<- *ContractPendingUnstake, ownerAddress []common.Address, receiverAddress []common.Address) (event.Subscription, error)

	ParsePendingUnstake(log types.Log) (*ContractPendingUnstake, error)

	FilterReceived(opts *bind.FilterOpts, sender []common.Address) (*ContractReceivedIterator, error)

	WatchReceived(opts *bind.WatchOpts, sink chan<- *ContractReceived, sender []common.Address) (event.Subscription, error)

	ParseReceived(log types.Log) (*ContractReceived, error)

	FilterRewardsDistributed(opts *bind.FilterOpts) (*ContractRewardsDistributedIterator, error)

	WatchRewardsDistributed(opts *bind.WatchOpts, sink chan<- *ContractRewardsDistributed) (event.Subscription, error)

	ParseRewardsDistributed(log types.Log) (*ContractRewardsDistributed, error)

	FilterStaked(opts *bind.FilterOpts, staker []common.Address) (*ContractStakedIterator, error)

	WatchStaked(opts *bind.WatchOpts, sink chan<- *ContractStaked, staker []common.Address) (event.Subscription, error)

	ParseStaked(log types.Log) (*ContractStaked, error)

	FilterUnstakeClaimed(opts *bind.FilterOpts, claimer []common.Address, caller []common.Address) (*ContractUnstakeClaimedIterator, error)

	WatchUnstakeClaimed(opts *bind.WatchOpts, sink chan<- *ContractUnstakeClaimed, claimer []common.Address, caller []common.Address) (event.Subscription, error)

	ParseUnstakeClaimed(log types.Log) (*ContractUnstakeClaimed, error)

	FilterUnstaked(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ContractUnstakedIterator, error)

	WatchUnstaked(opts *bind.WatchOpts, sink chan<- *ContractUnstaked, from []common.Address, to []common.Address) (event.Subscription, error)

	ParseUnstaked(log types.Log) (*ContractUnstaked, error)

	FilterUnstakesDistributed(opts *bind.FilterOpts) (*ContractUnstakesDistributedIterator, error)

	WatchUnstakesDistributed(opts *bind.WatchOpts, sink chan<- *ContractUnstakesDistributed) (event.Subscription, error)

	ParseUnstakesDistributed(log types.Log) (*ContractUnstakesDistributed, error)

	ParseLog(log types.Log) (generated.AbigenLog, error)

	Address() common.Address
}
