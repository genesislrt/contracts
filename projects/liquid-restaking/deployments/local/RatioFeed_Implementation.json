{
  "address": "0x1D891A01D40E60852F984ca35c1f26041A5a70a6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "OperatorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "failedRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "RatioNotUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "RatioThresholdChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRatio",
          "type": "uint256"
        }
      ],
      "name": "RatioUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "name": "averagePercentageRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getRatioFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRatioThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "historicalRatios",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "lastUpdate",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStakingConfig",
          "name": "stakingConfig",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "ratio",
          "type": "uint256"
        }
      ],
      "name": "repairRatioFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setRatioThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ratios",
          "type": "uint256[]"
        }
      ],
      "name": "updateRatioBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf0ddbfe6725cf7f61ff427dc72a96294c7fccdaf519ea1aa0358016847c797e",
  "receipt": {
    "to": null,
    "from": "0x683bEFfB378f6D03D288843c81E8dF4f39742aE5",
    "contractAddress": "0x1D891A01D40E60852F984ca35c1f26041A5a70a6",
    "transactionIndex": 0,
    "gasUsed": "895596",
    "logsBloom": "0x
    "blockHash": "0xdff9e2784d09343b8edc64ee409c56c52821e172bed59f1d363c2a81c0d353c9",
    "transactionHash": "0xbf0ddbfe6725cf7f61ff427dc72a96294c7fccdaf519ea1aa0358016847c797e",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "895596",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec61b6f542ebd960061b47e5cd60ea4f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"failedRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"RatioNotUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"RatioThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRatio\",\"type\":\"uint256\"}],\"name\":\"RatioUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"name\":\"averagePercentageRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getRatioFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"historicalRatios\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"lastUpdate\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingConfig\",\"name\":\"stakingConfig\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ratio\",\"type\":\"uint256\"}],\"name\":\"repairRatioFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setRatioThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ratios\",\"type\":\"uint256[]\"}],\"name\":\"updateRatioBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ratioThreshold\":{\"details\":\"diff between the current ratio and a new one in %(0.000001 ... 100%)\"},\"_ratioUpdates\":{\"details\":\"use this instead of HistoricalRatios.lastUpdate to check for 12hr ratio update timeout\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RatioFeed.sol\":\"RatioFeed\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/RatioFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IRatioFeed.sol\\\";\\nimport \\\"./interfaces/IStakingConfig.sol\\\";\\n\\ncontract RatioFeed is\\nInitializable,\\nIRatioFeed\\n{\\n    IStakingConfig _stakingConfig;\\n\\n    struct HistoricalRatios {\\n        uint64[9] historicalRatios;\\n        uint40 lastUpdate;\\n    }\\n\\n    mapping(address => uint256) private _ratios;\\n    mapping(address => HistoricalRatios) public historicalRatios;\\n\\n    uint32 public constant MAX_THRESHOLD = uint32(1e8); // 100000000\\n\\n    /// @dev diff between the current ratio and a new one in %(0.000001 ... 100%)\\n    uint256 private _ratioThreshold;\\n\\n    /// @dev use this instead of HistoricalRatios.lastUpdate to check for 12hr ratio update timeout\\n    mapping(address => uint256) private _ratioUpdates;\\n\\n    function initialize(IStakingConfig stakingConfig) public initializer {\\n        _stakingConfig = stakingConfig;\\n    }\\n\\n    modifier onlyGovernance() virtual {\\n        require(\\n            msg.sender == _stakingConfig.getGovernanceAddress(),\\n            \\\"RatioFeed: only governance allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            msg.sender == _stakingConfig.getOperatorAddress(),\\n            \\\"RatioFeed: only operator allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRatioBatch(\\n        address[] calldata addresses,\\n        uint256[] calldata ratios\\n    ) public override onlyOperator {\\n        require(addresses.length == ratios.length, \\\"corrupted ratio data\\\");\\n        require(_ratioThreshold > 0, \\\"ratio threshold is not set\\\");\\n\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            address tokenAddr = addresses[i];\\n            uint256 lastUpdate = _ratioUpdates[tokenAddr];\\n            uint256 oldRatio = _ratios[tokenAddr];\\n            uint256 newRatio = ratios[i];\\n\\n            (bool valid, string memory reason) = _checkRatioRules(\\n                lastUpdate,\\n                newRatio,\\n                oldRatio\\n            );\\n\\n            if (!valid) {\\n                emit RatioNotUpdated(tokenAddr, newRatio, reason);\\n                // continue to other ratios\\n                continue;\\n            }\\n\\n            _ratios[tokenAddr] = newRatio;\\n            emit RatioUpdated(tokenAddr, oldRatio, newRatio);\\n\\n            _ratioUpdates[tokenAddr] = uint40(block.timestamp);\\n\\n            // let's compare with a new ratio\\n            HistoricalRatios storage hisRatio = historicalRatios[tokenAddr];\\n            if (block.timestamp - hisRatio.lastUpdate > 1 days - 1 minutes) {\\n                uint64 latestOffset = hisRatio.historicalRatios[0];\\n                hisRatio.historicalRatios[\\n                ((latestOffset + 1) % 8) + 1\\n                ] = uint64(newRatio);\\n                hisRatio.historicalRatios[0] = latestOffset + 1;\\n                hisRatio.lastUpdate = uint40(block.timestamp);\\n            }\\n        }\\n    }\\n\\n    function getRatioThreshold() public view returns (uint256) {\\n        return _ratioThreshold;\\n    }\\n\\n    function _checkRatioRules(\\n        uint256 lastUpdated,\\n        uint256 newRatio,\\n        uint256 oldRatio\\n    ) internal view returns (bool valid, string memory reason) {\\n        // initialization of the first ratio -> skip checks\\n        if (oldRatio == 0) {\\n            return (valid = true, reason);\\n        }\\n\\n        if (block.timestamp - lastUpdated < 12 hours) {\\n            // valid == false\\n            return (valid, reason = \\\"ratio was updated less than 12 hours ago\\\");\\n        }\\n        // new ratio should be not greater than a previous one\\n        if (newRatio > oldRatio) {\\n            // valid == false\\n            return (valid, reason = \\\"new ratio cannot be greater than old\\\");\\n        }\\n        // new ratio should be in the range (oldRatio - threshold , oldRatio]\\n        uint256 threshold = (oldRatio * _ratioThreshold) / MAX_THRESHOLD;\\n        if (newRatio < oldRatio - threshold) {\\n            // valid == false\\n            return (valid, reason = \\\"new ratio too low, not in threshold range\\\");\\n        }\\n\\n        return (valid = true, reason);\\n    }\\n\\n    function averagePercentageRate(\\n        address addr,\\n        uint256 day\\n    ) external view returns (uint256) {\\n        require(day > 0 && day < 8, \\\"day should be from 1 to 7\\\");\\n\\n        HistoricalRatios storage hisRatio = historicalRatios[addr];\\n        uint64 latestOffset = hisRatio.historicalRatios[0];\\n\\n        uint256 oldestRatio = hisRatio.historicalRatios[\\n        ((latestOffset - day) % 8) + 1\\n        ];\\n        uint256 newestRatio = hisRatio.historicalRatios[\\n        ((latestOffset) % 8) + 1\\n        ];\\n\\n        if (oldestRatio < newestRatio) {\\n            return 0;\\n        }\\n\\n        return\\n        ((oldestRatio - newestRatio) * 10 ** 20 * 365) /\\n        (oldestRatio * (day));\\n    }\\n\\n    function repairRatioFor(address token, uint256 ratio) public onlyGovernance {\\n        require(ratio != 0, \\\"ratio is zero\\\");\\n        uint256 oldRatio = _ratios[token];\\n        _ratios[token] = ratio;\\n        emit RatioUpdated(token, oldRatio, ratio);\\n    }\\n\\n    function getRatioFor(address token) public view override returns (uint256) {\\n        return _ratios[token];\\n    }\\n\\n    function setRatioThreshold(uint256 newValue) public onlyGovernance {\\n        require(\\n            newValue < MAX_THRESHOLD && newValue > 0,\\n            \\\"wrong value for ratio threshold\\\"\\n        );\\n        uint256 oldValue = _ratioThreshold;\\n        _ratioThreshold = newValue;\\n        emit RatioThresholdChanged(oldValue, newValue);\\n    }\\n}\\n\",\"keccak256\":\"0xdb0ef4262331dc907c3b1882e57d9869cd37d03aebfe7269f2b053281217cc2b\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IGovernable {\\n    event GovernanceAddressChanged(address prevValue, address newValue);\\n\\n    function getGovernanceAddress() external view returns (address);\\n    function setGovernanceAddress(address newValue) external;\\n}\",\"keccak256\":\"0xe4644174b723a10cad795e8448c91bf612d59a855fc80ea532f741cc4b000d96\",\"license\":\"MIT\"},\"contracts/interfaces/IRatioFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IRatioFeed {\\n\\n    event OperatorAdded(address operator);\\n    event OperatorRemoved(address operator);\\n    event RatioThresholdChanged(uint256 oldValue, uint256 newValue);\\n\\n    event RatioUpdated(address indexed tokenAddress, uint256 oldRatio, uint256 newRatio);\\n    event RatioNotUpdated(address indexed tokenAddress, uint256 failedRatio, string reason);\\n\\n    function updateRatioBatch(address[] calldata addresses, uint256[] calldata ratios) external;\\n\\n    function getRatioFor(address) external view returns (uint256);\\n}\",\"keccak256\":\"0x238e19faaebf390e1b5ae9e84404b742de103a30646cefcf57936ad225846a59\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IGovernable.sol\\\";\\n\\ninterface IStakingConfig is IGovernable {\\n    event OperatorAddressChanged(address prevValue, address newValue);\\n    event TreasuryAddressChanged(address prevValue, address newValue);\\n    event RatioFeedAddressChanged(address prevValue, address newValue);\\n    event CertTokenAddressChanged(address prevValue, address newValue);\\n    event StakingPoolAddressChanged(address prevValue, address newValue);\\n    event EigenManagerAddressChanged(address prevValue, address newValue);\\n    event MinUnstakeChanged(uint256 prevValue, uint256 newValue);\\n    event MinStakeChanged(uint256 prevValue, uint256 newValue);\\n\\n    function getOperatorAddress() external view returns (address);\\n\\n    function getRatioFeedAddress() external view returns (address);\\n\\n    function getStakingPoolAddress() external view returns (address);\\n\\n    function getTreasuryAddress() external view returns (address);\\n\\n    function getEigenPodManagerAddress() external view returns (address);\\n\\n    function getCertTokenAddress() external view returns (address);\\n\\n    function getMinStake() external view returns (uint256);\\n\\n    function getMinUnstake() external view returns (uint256);\\n\\n    function setStakingPoolAddress(address newValue) external;\\n\\n    function setOperatorAddress(address newValue) external;\\n\\n    function setRatioFeedAddress(address newValue) external;\\n\\n    function setTreasuryAddress(address newValue) external;\\n\\n    function setCertTokenAddress(address newValue) external;\\n\\n    function setMinStake(uint256 newValue) external;\\n\\n    function setMinUnstake(uint256 newValue) external;\\n}\",\"keccak256\":\"0x4ce8a03f9908cfec0ef658d784ce1f3b88fbef1a12418ea9fe008ee69cf506fd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f3e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a1f1d48d11610066578063a1f1d48d14610106578063b037d56a1461012f578063ba34fa0514610142578063c4d66de81461014a578063ec653c4b1461015d57600080fd5b806308af5431146100985780632364753a146100bd5780632acaaff4146100d25780632ef86a1f146100f3575b600080fd5b6100a36305f5e10081565b60405163ffffffff90911681526020015b60405180910390f35b6100d06100cb366004610b9a565b61019d565b005b6100e56100e0366004610bcb565b6102f2565b6040519081526020016100b4565b6100d0610101366004610bcb565b610488565b6100e5610114366004610bf7565b6001600160a01b031660009081526001602052604090205490565b6100d061013d366004610c66565b6105ce565b6003546100e5565b6100d0610158366004610bf7565b610997565b61018761016b366004610bf7565b60026020526000908152604090206003015464ffffffffff1681565b60405164ffffffffff90911681526020016100b4565b600060029054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102149190610cd1565b6001600160a01b0316336001600160a01b03161461024d5760405162461bcd60e51b815260040161024490610cee565b60405180910390fd5b6305f5e100811080156102605750600081115b6102ac5760405162461bcd60e51b815260206004820152601f60248201527f77726f6e672076616c756520666f7220726174696f207468726573686f6c64006044820152606401610244565b600380549082905560408051828152602081018490527f661e4cadf2d36ec16a59d60dcfeebe23f9be2aec99852725798a4be99790840e91015b60405180910390a15050565b600080821180156103035750600882105b61034f5760405162461bcd60e51b815260206004820152601960248201527f6461792073686f756c642062652066726f6d203120746f2037000000000000006044820152606401610244565b6001600160a01b0383166000908152600260205260408120805490916001600160401b03909116908260086103848785610d5c565b61038e9190610d85565b610399906001610d99565b600981106103a9576103a9610d30565b60048104909101546001600160401b036008600390931683026101000a90910416915060009084906103db9085610dac565b6103e6906001610dd2565b6001600160401b0316600981106103ff576103ff610d30565b600491828204019190066008029054906101000a90046001600160401b03166001600160401b031690508082101561043e576000945050505050610482565b6104488683610df9565b6104528284610d5c565b6104659068056bc75e2d63100000610df9565b6104719061016d610df9565b61047b9190610e10565b9450505050505b92915050565b600060029054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190610cd1565b6001600160a01b0316336001600160a01b03161461052f5760405162461bcd60e51b815260040161024490610cee565b8060000361056f5760405162461bcd60e51b815260206004820152600d60248201526c726174696f206973207a65726f60981b6044820152606401610244565b6001600160a01b038216600081815260016020908152604091829020805490859055825181815291820185905292917f4c5c23b4efbfea6d16c8453f565e165a02a22cda9a8dc7aac0a66f91d2304da6910160405180910390a2505050565b600060029054906101000a90046001600160a01b03166001600160a01b0316632ec338ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106459190610cd1565b6001600160a01b0316336001600160a01b0316146106a55760405162461bcd60e51b815260206004820181905260248201527f526174696f466565643a206f6e6c79206f70657261746f7220616c6c6f7765646044820152606401610244565b8281146106eb5760405162461bcd60e51b8152602060048201526014602482015273636f7272757074656420726174696f206461746160601b6044820152606401610244565b60006003541161073d5760405162461bcd60e51b815260206004820152601a60248201527f726174696f207468726573686f6c64206973206e6f74207365740000000000006044820152606401610244565b60005b8381101561099057600085858381811061075c5761075c610d30565b90506020020160208101906107719190610bf7565b6001600160a01b038116600090815260046020908152604080832054600190925282205492935091908686868181106107ac576107ac610d30565b9050602002013590506000806107c3858486610abf565b915091508161081a57856001600160a01b03167f2471a7627ad27128888e46dfc72f5d674c7156d6e99c969a675492a558a0b0e08483604051610807929190610e24565b60405180910390a250505050505061097e565b6001600160a01b03861660008181526001602090815260409182902086905581518781529081018690527f4c5c23b4efbfea6d16c8453f565e165a02a22cda9a8dc7aac0a66f91d2304da6910160405180910390a26001600160a01b038616600090815260046020908152604080832064ffffffffff42818116909255600290935292206003810154909262015144926108b5921690610d5c565b11156109765780546001600160401b0316848260086108d5846001610dd2565b6108df9190610dac565b6108ea906001610dd2565b6001600160401b03166009811061090357610903610d30565b600491828204019190066008026101000a8154816001600160401b0302191690836001600160401b0316021790555080600161093f9190610dd2565b825467ffffffffffffffff19166001600160401b03919091161782555060038101805464ffffffffff19164264ffffffffff161790555b505050505050505b8061098881610e7a565b915050610740565b5050505050565b600054610100900460ff16158080156109b75750600054600160ff909116105b806109d15750303b1580156109d1575060005460ff166001145b610a345760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610244565b6000805460ff191660011790558015610a57576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015610abb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102e6565b5050565b6000606082600003610ad45760019150610b92565b61a8c0610ae18642610d5c565b1015610b0a5781604051806060016040528060288152602001610e946028913991509150610b92565b82841115610b355781604051806060016040528060248152602001610ebc6024913991509150610b92565b6003546000906305f5e10090610b4b9086610df9565b610b559190610e10565b9050610b618185610d5c565b851015610b8c5782604051806060016040528060298152602001610ee0602991399250925050610b92565b60019250505b935093915050565b600060208284031215610bac57600080fd5b5035919050565b6001600160a01b0381168114610bc857600080fd5b50565b60008060408385031215610bde57600080fd5b8235610be981610bb3565b946020939093013593505050565b600060208284031215610c0957600080fd5b8135610c1481610bb3565b9392505050565b60008083601f840112610c2d57600080fd5b5081356001600160401b03811115610c4457600080fd5b6020830191508360208260051b8501011115610c5f57600080fd5b9250929050565b60008060008060408587031215610c7c57600080fd5b84356001600160401b0380821115610c9357600080fd5b610c9f88838901610c1b565b90965094506020870135915080821115610cb857600080fd5b50610cc587828801610c1b565b95989497509550505050565b600060208284031215610ce357600080fd5b8151610c1481610bb3565b60208082526022908201527f526174696f466565643a206f6e6c7920676f7665726e616e636520616c6c6f77604082015261195960f21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561048257610482610d46565b634e487b7160e01b600052601260045260246000fd5b600082610d9457610d94610d6f565b500690565b8082018082111561048257610482610d46565b60006001600160401b0380841680610dc657610dc6610d6f565b92169190910692915050565b6001600160401b03818116838216019080821115610df257610df2610d46565b5092915050565b808202811582820484141761048257610482610d46565b600082610e1f57610e1f610d6f565b500490565b82815260006020604081840152835180604085015260005b81811015610e5857858101830151858201606001528201610e3c565b506000606082860101526060601f19601f830116850101925050509392505050565b600060018201610e8c57610e8c610d46565b506001019056fe726174696f207761732075706461746564206c657373207468616e20313220686f7572732061676f6e657720726174696f2063616e6e6f742062652067726561746572207468616e206f6c646e657720726174696f20746f6f206c6f772c206e6f7420696e207468726573686f6c642072616e6765a26469706673582212204daaf7453a3e5ca2a512e1ab63d328e8ec580b1a17d9a329f49c9b3d221de88564736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a1f1d48d11610066578063a1f1d48d14610106578063b037d56a1461012f578063ba34fa0514610142578063c4d66de81461014a578063ec653c4b1461015d57600080fd5b806308af5431146100985780632364753a146100bd5780632acaaff4146100d25780632ef86a1f146100f3575b600080fd5b6100a36305f5e10081565b60405163ffffffff90911681526020015b60405180910390f35b6100d06100cb366004610b9a565b61019d565b005b6100e56100e0366004610bcb565b6102f2565b6040519081526020016100b4565b6100d0610101366004610bcb565b610488565b6100e5610114366004610bf7565b6001600160a01b031660009081526001602052604090205490565b6100d061013d366004610c66565b6105ce565b6003546100e5565b6100d0610158366004610bf7565b610997565b61018761016b366004610bf7565b60026020526000908152604090206003015464ffffffffff1681565b60405164ffffffffff90911681526020016100b4565b600060029054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102149190610cd1565b6001600160a01b0316336001600160a01b03161461024d5760405162461bcd60e51b815260040161024490610cee565b60405180910390fd5b6305f5e100811080156102605750600081115b6102ac5760405162461bcd60e51b815260206004820152601f60248201527f77726f6e672076616c756520666f7220726174696f207468726573686f6c64006044820152606401610244565b600380549082905560408051828152602081018490527f661e4cadf2d36ec16a59d60dcfeebe23f9be2aec99852725798a4be99790840e91015b60405180910390a15050565b600080821180156103035750600882105b61034f5760405162461bcd60e51b815260206004820152601960248201527f6461792073686f756c642062652066726f6d203120746f2037000000000000006044820152606401610244565b6001600160a01b0383166000908152600260205260408120805490916001600160401b03909116908260086103848785610d5c565b61038e9190610d85565b610399906001610d99565b600981106103a9576103a9610d30565b60048104909101546001600160401b036008600390931683026101000a90910416915060009084906103db9085610dac565b6103e6906001610dd2565b6001600160401b0316600981106103ff576103ff610d30565b600491828204019190066008029054906101000a90046001600160401b03166001600160401b031690508082101561043e576000945050505050610482565b6104488683610df9565b6104528284610d5c565b6104659068056bc75e2d63100000610df9565b6104719061016d610df9565b61047b9190610e10565b9450505050505b92915050565b600060029054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ff9190610cd1565b6001600160a01b0316336001600160a01b03161461052f5760405162461bcd60e51b815260040161024490610cee565b8060000361056f5760405162461bcd60e51b815260206004820152600d60248201526c726174696f206973207a65726f60981b6044820152606401610244565b6001600160a01b038216600081815260016020908152604091829020805490859055825181815291820185905292917f4c5c23b4efbfea6d16c8453f565e165a02a22cda9a8dc7aac0a66f91d2304da6910160405180910390a2505050565b600060029054906101000a90046001600160a01b03166001600160a01b0316632ec338ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610621573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106459190610cd1565b6001600160a01b0316336001600160a01b0316146106a55760405162461bcd60e51b815260206004820181905260248201527f526174696f466565643a206f6e6c79206f70657261746f7220616c6c6f7765646044820152606401610244565b8281146106eb5760405162461bcd60e51b8152602060048201526014602482015273636f7272757074656420726174696f206461746160601b6044820152606401610244565b60006003541161073d5760405162461bcd60e51b815260206004820152601a60248201527f726174696f207468726573686f6c64206973206e6f74207365740000000000006044820152606401610244565b60005b8381101561099057600085858381811061075c5761075c610d30565b90506020020160208101906107719190610bf7565b6001600160a01b038116600090815260046020908152604080832054600190925282205492935091908686868181106107ac576107ac610d30565b9050602002013590506000806107c3858486610abf565b915091508161081a57856001600160a01b03167f2471a7627ad27128888e46dfc72f5d674c7156d6e99c969a675492a558a0b0e08483604051610807929190610e24565b60405180910390a250505050505061097e565b6001600160a01b03861660008181526001602090815260409182902086905581518781529081018690527f4c5c23b4efbfea6d16c8453f565e165a02a22cda9a8dc7aac0a66f91d2304da6910160405180910390a26001600160a01b038616600090815260046020908152604080832064ffffffffff42818116909255600290935292206003810154909262015144926108b5921690610d5c565b11156109765780546001600160401b0316848260086108d5846001610dd2565b6108df9190610dac565b6108ea906001610dd2565b6001600160401b03166009811061090357610903610d30565b600491828204019190066008026101000a8154816001600160401b0302191690836001600160401b0316021790555080600161093f9190610dd2565b825467ffffffffffffffff19166001600160401b03919091161782555060038101805464ffffffffff19164264ffffffffff161790555b505050505050505b8061098881610e7a565b915050610740565b5050505050565b600054610100900460ff16158080156109b75750600054600160ff909116105b806109d15750303b1580156109d1575060005460ff166001145b610a345760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610244565b6000805460ff191660011790558015610a57576000805461ff0019166101001790555b6000805462010000600160b01b031916620100006001600160a01b038516021790558015610abb576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016102e6565b5050565b6000606082600003610ad45760019150610b92565b61a8c0610ae18642610d5c565b1015610b0a5781604051806060016040528060288152602001610e946028913991509150610b92565b82841115610b355781604051806060016040528060248152602001610ebc6024913991509150610b92565b6003546000906305f5e10090610b4b9086610df9565b610b559190610e10565b9050610b618185610d5c565b851015610b8c5782604051806060016040528060298152602001610ee0602991399250925050610b92565b60019250505b935093915050565b600060208284031215610bac57600080fd5b5035919050565b6001600160a01b0381168114610bc857600080fd5b50565b60008060408385031215610bde57600080fd5b8235610be981610bb3565b946020939093013593505050565b600060208284031215610c0957600080fd5b8135610c1481610bb3565b9392505050565b60008083601f840112610c2d57600080fd5b5081356001600160401b03811115610c4457600080fd5b6020830191508360208260051b8501011115610c5f57600080fd5b9250929050565b60008060008060408587031215610c7c57600080fd5b84356001600160401b0380821115610c9357600080fd5b610c9f88838901610c1b565b90965094506020870135915080821115610cb857600080fd5b50610cc587828801610c1b565b95989497509550505050565b600060208284031215610ce357600080fd5b8151610c1481610bb3565b60208082526022908201527f526174696f466565643a206f6e6c7920676f7665726e616e636520616c6c6f77604082015261195960f21b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561048257610482610d46565b634e487b7160e01b600052601260045260246000fd5b600082610d9457610d94610d6f565b500690565b8082018082111561048257610482610d46565b60006001600160401b0380841680610dc657610dc6610d6f565b92169190910692915050565b6001600160401b03818116838216019080821115610df257610df2610d46565b5092915050565b808202811582820484141761048257610482610d46565b600082610e1f57610e1f610d6f565b500490565b82815260006020604081840152835180604085015260005b81811015610e5857858101830151858201606001528201610e3c565b506000606082860101526060601f19601f830116850101925050509392505050565b600060018201610e8c57610e8c610d46565b506001019056fe726174696f207761732075706461746564206c657373207468616e20313220686f7572732061676f6e657720726174696f2063616e6e6f742062652067726561746572207468616e206f6c646e657720726174696f20746f6f206c6f772c206e6f7420696e207468726573686f6c642072616e6765a26469706673582212204daaf7453a3e5ca2a512e1ab63d328e8ec580b1a17d9a329f49c9b3d221de88564736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "_ratioThreshold": {
        "details": "diff between the current ratio and a new one in %(0.000001 ... 100%)"
      },
      "_ratioUpdates": {
        "details": "use this instead of HistoricalRatios.lastUpdate to check for 12hr ratio update timeout"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/RatioFeed.sol:RatioFeed",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/RatioFeed.sol:RatioFeed",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2551,
        "contract": "contracts/RatioFeed.sol:RatioFeed",
        "label": "_stakingConfig",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IStakingConfig)4460"
      },
      {
        "astId": 2562,
        "contract": "contracts/RatioFeed.sol:RatioFeed",
        "label": "_ratios",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2567,
        "contract": "contracts/RatioFeed.sol:RatioFeed",
        "label": "historicalRatios",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(HistoricalRatios)2558_storage)"
      },
      {
        "astId": 2576,
        "contract": "contracts/RatioFeed.sol:RatioFeed",
        "label": "_ratioThreshold",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2581,
        "contract": "contracts/RatioFeed.sol:RatioFeed",
        "label": "_ratioUpdates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint64)9_storage": {
        "base": "t_uint64",
        "encoding": "inplace",
        "label": "uint64[9]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStakingConfig)4460": {
        "encoding": "inplace",
        "label": "contract IStakingConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(HistoricalRatios)2558_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RatioFeed.HistoricalRatios)",
        "numberOfBytes": "32",
        "value": "t_struct(HistoricalRatios)2558_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(HistoricalRatios)2558_storage": {
        "encoding": "inplace",
        "label": "struct RatioFeed.HistoricalRatios",
        "members": [
          {
            "astId": 2555,
            "contract": "contracts/RatioFeed.sol:RatioFeed",
            "label": "historicalRatios",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint64)9_storage"
          },
          {
            "astId": 2557,
            "contract": "contracts/RatioFeed.sol:RatioFeed",
            "label": "lastUpdate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}