{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/ICertificateToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\n\ninterface ICertificateToken is IERC20Upgradeable {\n\n    function sharesToBonds(uint256 amount) external view returns (uint256);\n\n    function bondsToShares(uint256 amount) external view returns (uint256);\n\n    function ratio() external view returns (uint256);\n\n    function isRebasing() external pure returns (bool);\n\n    function mint(address account, uint256 amount) external;\n\n    function burn(address account, uint256 amount) external;\n}"
    },
    "contracts/interfaces/IEigenPodManager.sol": {
      "content": "interface IEigenPodManager {\n    /**\n     * @notice Creates an EigenPod for the sender.\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\n     */\n    function createPod() external;\n\n    /**\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod. \n     * Also creates an EigenPod for the sender if they don't have one already.\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\n     * @param signature The validator's signature of the deposit data.\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\n     */\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\n}"
    },
    "contracts/interfaces/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IGovernable {\n    event GovernanceAddressChanged(address prevValue, address newValue);\n\n    function getGovernanceAddress() external view returns (address);\n    function setGovernanceAddress(address newValue) external;\n}"
    },
    "contracts/interfaces/IStakingConfig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"./IGovernable.sol\";\n\ninterface IStakingConfig is IGovernable {\n    event OperatorAddressChanged(address prevValue, address newValue);\n    event TreasuryAddressChanged(address prevValue, address newValue);\n    event RatioFeedAddressChanged(address prevValue, address newValue);\n    event CertTokenAddressChanged(address prevValue, address newValue);\n    event StakingPoolAddressChanged(address prevValue, address newValue);\n    event EigenManagerAddressChanged(address prevValue, address newValue);\n    event MinUnstakeChanged(uint256 prevValue, uint256 newValue);\n    event MinStakeChanged(uint256 prevValue, uint256 newValue);\n\n    function getOperatorAddress() external view returns (address);\n\n    function getRatioFeedAddress() external view returns (address);\n\n    function getStakingPoolAddress() external view returns (address);\n\n    function getTreasuryAddress() external view returns (address);\n\n    function getEigenPodManagerAddress() external view returns (address);\n\n    function getCertTokenAddress() external view returns (address);\n\n    function getMinStake() external view returns (uint256);\n\n    function getMinUnstake() external view returns (uint256);\n\n    function setStakingPoolAddress(address newValue) external;\n\n    function setOperatorAddress(address newValue) external;\n\n    function setRatioFeedAddress(address newValue) external;\n\n    function setTreasuryAddress(address newValue) external;\n\n    function setCertTokenAddress(address newValue) external;\n\n    function setMinStake(uint256 newValue) external;\n\n    function setMinUnstake(uint256 newValue) external;\n}"
    },
    "contracts/interfaces/IStakingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface IStakingPool {\n    event Staked(\n        address indexed staker,\n        uint256 amount,\n        uint256 shares\n    );\n\n    event PoolOnGoing(\n        bytes pubkey\n    );\n\n    event DistributeGasLimitChanged(uint256 prevValue, uint256 newValue);\n\n    event PendingUnstake(\n        address indexed ownerAddress,\n        address indexed receiverAddress,\n        uint256 amount,\n        uint256 shares\n    );\n\n    event Received(address indexed from, uint256 value);\n\n    function stakeCerts() external payable;\n\n    function getFreeBalance() external view returns (uint256);\n\n    function getMinStake() external view returns (uint256);\n\n    function getMinUnstake() external view returns (uint256);\n\n    function pushToBeaconMulti(bytes[] calldata pubkeys, bytes[] calldata signatures, bytes32[] calldata deposit_data_roots) external;\n}\n"
    },
    "contracts/upgrades/StakingPool_V1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/ICertificateToken.sol\";\nimport \"../interfaces/IStakingConfig.sol\";\nimport \"../interfaces/IStakingPool.sol\";\nimport \"../interfaces/IEigenPodManager.sol\";\n\ncontract StakingPool_V1 is\nIStakingPool,\nInitializable,\nReentrancyGuardUpgradeable\n{\n    /**\n     * @dev external contracts\n     */\n    IStakingConfig internal _stakingConfig;\n\n    uint256 internal _DISTRIBUTE_GAS_LIMIT;\n\n    uint256 internal _pendingGap;\n\n    uint256 internal _pendingTotalUnstakes;\n    address[] internal _pendingClaimers;\n    mapping(address => uint256) internal _pendingClaimerUnstakes;\n\n    uint256[] internal _pendingRequests;\n\n    // reserve some gap for the future upgrades\n    uint256[50 - 5] private __reserved;\n\n    event RewardsDistributed(address[] claimers, uint256[] amounts);\n\n    modifier onlyGovernance() virtual {\n        require(\n            msg.sender == _stakingConfig.getGovernanceAddress(),\n            \"StakingPool: only governance allowed\"\n        );\n        _;\n    }\n\n    modifier onlyOperator() {\n        require(\n            msg.sender == _stakingConfig.getOperatorAddress(),\n            \"StakingPool: only consensus allowed\"\n        );\n        _;\n    }\n\n    function initialize(IStakingConfig stakingConfig, uint256 distributeGasLimit) external initializer {\n        _stakingConfig = stakingConfig;\n        IEigenPodManager(stakingConfig.getEigenPodManagerAddress()).createPod();\n        __QueuePool_init(distributeGasLimit);\n    }\n\n\n    function __QueuePool_init(\n        uint256 distributeGasLimit\n    ) internal {\n        _DISTRIBUTE_GAS_LIMIT = distributeGasLimit;\n        emit DistributeGasLimitChanged(0, distributeGasLimit);\n    }\n\n    function stakeCerts() external payable override nonReentrant {\n        uint256 amount = msg.value;\n        require(\n            amount >= _stakingConfig.getMinStake(),\n            \"StakingPool: value must be greater than min amount\"\n        );\n        ICertificateToken certificateToken = ICertificateToken(_stakingConfig.getCertTokenAddress());\n        uint256 shares = certificateToken.bondsToShares(amount);\n        certificateToken.mint(msg.sender, shares);\n        emit Staked(msg.sender, amount, shares);\n    }\n\n    function pushToBeaconMulti(bytes[] calldata pubkeys, bytes[] calldata signatures, bytes32[] calldata deposit_data_roots) public onlyOperator {\n        uint256 pubkeysLen = pubkeys.length;\n        require(pubkeysLen == signatures.length && signatures.length == deposit_data_roots.length, \"StakingPool: length are not equal\");\n        require(address(this).balance >= 32 ether * pubkeysLen, \"pending ethers not enough\");\n        IEigenPodManager eigenPodManager = IEigenPodManager(_stakingConfig.getEigenPodManagerAddress());\n        for (uint i = 0; i < pubkeysLen; i++) {\n            eigenPodManager.stake(pubkeys[i], signatures[i], deposit_data_roots[i]);\n            emit PoolOnGoing(pubkeys[i]);\n        }\n    }\n\n\n    function pushToBeacon(bytes calldata pubkey, bytes calldata signature, bytes32 deposit_data_root) public onlyOperator {\n        require(address(this).balance >= 32 ether, \"pending ethers not enough\");\n        IEigenPodManager(_stakingConfig.getEigenPodManagerAddress()).stake(pubkey, signature, deposit_data_root);\n        emit PoolOnGoing(pubkey);\n    }\n\n    function getFreeBalance() public view virtual returns (uint256) {\n        return address(this).balance;\n    }\n\n    /**\n    * @notice Burns amount of certificate from msg.sender\n     * @notice Returns native token immediately or via queue\n     * @param receiverAddress address for receiving unstaked funds\n     * @param shares amount of certificate token to unstake\n     */\n    function unstakeCerts(\n        address receiverAddress,\n        uint256 shares\n    ) external {\n        address ownerAddress = msg.sender;\n        ICertificateToken certificateToken = ICertificateToken(_stakingConfig.getCertTokenAddress());\n\n        uint256 amount = certificateToken.sharesToBonds(shares);\n        require(\n            amount >= _stakingConfig.getMinUnstake(),\n            \"StakingPool: value must be greater than min amount\"\n        );\n\n        require(\n            certificateToken.balanceOf(ownerAddress) >= shares,\n            \"StakingPool: cannot unstake more than have on address\"\n        );\n        certificateToken.burn(ownerAddress, shares);\n        _addIntoQueue(ownerAddress, receiverAddress, shares, amount);\n    }\n\n    /**\n     * @return Certificate token address\n     */\n    function getCert() external view virtual returns (address) {\n        return _stakingConfig.getCertTokenAddress();\n    }\n\n    function getEigenPodManager() external view virtual returns (address){\n        return _stakingConfig.getEigenPodManagerAddress();\n    }\n\n    function getMinStake() external view virtual returns (uint256){\n        return _stakingConfig.getMinStake();\n    }\n\n    function getMinUnstake() public view virtual override returns (uint256) {\n        return _stakingConfig.getMinUnstake();\n    }\n\n    function setDistributeGasLimit(uint256 newValue) external onlyGovernance {\n        uint256 prevValue = _DISTRIBUTE_GAS_LIMIT;\n        _DISTRIBUTE_GAS_LIMIT = newValue;\n\n        emit DistributeGasLimitChanged(prevValue, newValue);\n    }\n\n    function getDistributeGasLimit() public view returns (uint256) {\n        return _DISTRIBUTE_GAS_LIMIT;\n    }\n\n    function _addIntoQueue(\n        address owner,\n        address claimer,\n        uint256 shares,\n        uint256 amount\n    ) internal {\n        require(\n            amount != 0 && claimer != address(0),\n            \"LiquidTokenStakingPool: zero input values\"\n        );\n        // each new request is placed at the end of the queue\n        _pendingTotalUnstakes += amount;\n        _pendingClaimers.push(claimer);\n        _pendingRequests.push(amount);\n        _pendingClaimerUnstakes[claimer] += amount;\n        emit PendingUnstake(owner, claimer, amount, shares);\n    }\n\n    function getTotalPendingUnstakes() public view returns (uint256) {\n        return _pendingTotalUnstakes;\n    }\n\n    function getPendingRequestsOf(\n        address claimer\n    ) public view returns (uint256[] memory) {\n        uint256 j;\n        uint256[] memory unstakes = new uint256[](\n            _pendingClaimers.length - _pendingGap\n        );\n        for (uint256 i = _pendingGap; i < _pendingClaimers.length; i++) {\n            if (_pendingClaimers[i] == claimer) {\n                unstakes[j] = _pendingRequests[i];\n                ++j;\n            }\n        }\n        uint256 removeCells = unstakes.length - j;\n        if (removeCells > 0) {\n            assembly {\n                mstore(unstakes, j)\n            }\n        }\n        return unstakes;\n    }\n\n    function getPendingUnstakesOf(\n        address claimer\n    ) public view returns (uint256) {\n        return _pendingClaimerUnstakes[claimer];\n    }\n\n    function distributePendingRewards() external {\n        require(\n            _DISTRIBUTE_GAS_LIMIT > 0,\n            \"StakingPool: DISTRIBUTE_GAS_LIMIT is not set\"\n        );\n        uint256 poolBalance = getFreeBalance();\n        address[] memory claimers = new address[](\n            _pendingClaimers.length - _pendingGap\n        );\n        uint256[] memory amounts = new uint256[](\n            _pendingClaimers.length - _pendingGap\n        );\n        uint256 j = 0;\n        uint256 i = _pendingGap;\n\n        while (\n            i < _pendingClaimers.length &&\n            poolBalance > 0 &&\n            gasleft() > _DISTRIBUTE_GAS_LIMIT\n        ) {\n            address claimer = _pendingClaimers[i];\n            uint256 toDistribute = _pendingRequests[i];\n            if (claimer == address(0) || toDistribute == 0) {\n                ++i;\n                continue;\n            }\n\n            if (poolBalance < toDistribute) {\n                break;\n            }\n\n            _pendingClaimerUnstakes[claimer] -= toDistribute;\n            _pendingTotalUnstakes -= toDistribute;\n            poolBalance -= toDistribute;\n            delete _pendingClaimers[i];\n            delete _pendingRequests[i];\n            ++i;\n\n            bool success = _unsafeTransfer(claimer, toDistribute, true);\n            if (!success) {\n                continue;\n            }\n            claimers[j] = claimer;\n            amounts[j] = toDistribute;\n            ++j;\n        }\n        _pendingGap = i;\n        /* decrease arrays */\n        uint256 removeCells = claimers.length - j;\n        if (removeCells > 0) {\n            assembly {\n                mstore(claimers, j)\n            }\n            assembly {\n                mstore(amounts, j)\n            }\n        }\n\n        emit RewardsDistributed(claimers, amounts);\n    }\n\n    /**\n * @dev Unsafe transfer with gas limit if necessary\n     * @notice The solution was received from eth bounty program\n     */\n    function _unsafeTransfer(\n        address receiverAddress,\n        uint256 amount,\n        bool limit\n    ) internal virtual returns (bool) {\n        address payable wallet = payable(receiverAddress);\n        bool success;\n        if (limit) {\n            assembly {\n                success := call(10000, wallet, amount, 0, 0, 0, 0)\n            }\n            return success;\n        }\n        (success,) = wallet.call{value : amount}(\"\");\n        return success;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}