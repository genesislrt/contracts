{
  "address": "0x395713db54EE42e4a5188849058244CDE28D7ddc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "DistributeGasLimitChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ownerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "PendingUnstake",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        }
      ],
      "name": "PoolOnGoing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Received",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getCert",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributeGasLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEigenPodManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFreeBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinUnstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "getPendingRequestsOf",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        }
      ],
      "name": "getPendingUnstakesOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPendingUnstakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStakingConfig",
          "name": "stakingConfig",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "distributeGasLimit",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "deposit_data_root",
          "type": "bytes32"
        }
      ],
      "name": "pushToBeacon",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "pubkeys",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "deposit_data_roots",
          "type": "bytes32[]"
        }
      ],
      "name": "pushToBeaconMulti",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setDistributeGasLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeCerts",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiverAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "unstakeCerts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf024529ae96de456d55cb6d5fdd6ff1fe50ffec9f40de0564025893fcb3eb68a",
  "receipt": {
    "to": null,
    "from": "0x05e0e5198820fb62cbf7684C4D920b6D7f92ff67",
    "contractAddress": "0x395713db54EE42e4a5188849058244CDE28D7ddc",
    "transactionIndex": 26,
    "gasUsed": "1452909",
    "logsBloom": "0x
    "blockHash": "0xf95b40641d80841a995687875d2499caffe42758448eb51c0674eba7d767efeb",
    "transactionHash": "0xf024529ae96de456d55cb6d5fdd6ff1fe50ffec9f40de0564025893fcb3eb68a",
    "logs": [],
    "blockNumber": 9715897,
    "cumulativeGasUsed": "7822389",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b14c316a4425235a5dcd9a91947d67f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"DistributeGasLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PendingUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"}],\"name\":\"PoolOnGoing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Received\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCert\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributeGasLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEigenPodManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getPendingRequestsOf\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"}],\"name\":\"getPendingUnstakesOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPendingUnstakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStakingConfig\",\"name\":\"stakingConfig\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributeGasLimit\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"deposit_data_root\",\"type\":\"bytes32\"}],\"name\":\"pushToBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"pubkeys\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"deposit_data_roots\",\"type\":\"bytes32[]\"}],\"name\":\"pushToBeaconMulti\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setDistributeGasLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeCerts\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiverAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstakeCerts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getCert()\":{\"returns\":{\"_0\":\"Certificate token address\"}},\"unstakeCerts(address,uint256)\":{\"params\":{\"receiverAddress\":\"address for receiving unstaked funds\",\"shares\":\"amount of certificate token to unstake\"}}},\"stateVariables\":{\"_stakingConfig\":{\"details\":\"external contracts\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"unstakeCerts(address,uint256)\":{\"notice\":\"Burns amount of certificate from msg.senderReturns native token immediately or via queue\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingPool.sol\":\"StakingPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ICertificateToken.sol\\\";\\nimport \\\"./interfaces/IStakingConfig.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\nimport \\\"./interfaces/IEigenPodManager.sol\\\";\\n\\ncontract StakingPool is\\nIStakingPool,\\nInitializable,\\nReentrancyGuardUpgradeable\\n{\\n    /**\\n     * @dev external contracts\\n     */\\n    IStakingConfig internal _stakingConfig;\\n\\n    uint256 internal _DISTRIBUTE_GAS_LIMIT;\\n\\n    uint256 internal _pendingGap;\\n\\n    uint256 internal _pendingTotalUnstakes;\\n    address[] internal _pendingClaimers;\\n    mapping(address => uint256) internal _pendingClaimerUnstakes;\\n\\n    uint256[] internal _pendingRequests;\\n\\n    // reserve some gap for the future upgrades\\n    uint256[50 - 5] private __reserved;\\n\\n    modifier onlyGovernance() virtual {\\n        require(\\n            msg.sender == _stakingConfig.getGovernanceAddress(),\\n            \\\"StakingPool: only governance allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        require(\\n            msg.sender == _stakingConfig.getOperatorAddress(),\\n            \\\"StakingPool: only consensus allowed\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(IStakingConfig stakingConfig, uint256 distributeGasLimit) external initializer {\\n        _stakingConfig = stakingConfig;\\n        IEigenPodManager(stakingConfig.getEigenPodManagerAddress()).createPod();\\n        __QueuePool_init(distributeGasLimit);\\n    }\\n\\n\\n    function __QueuePool_init(\\n        uint256 distributeGasLimit\\n    ) internal {\\n        _DISTRIBUTE_GAS_LIMIT = distributeGasLimit;\\n        emit DistributeGasLimitChanged(0, distributeGasLimit);\\n    }\\n\\n    function stakeCerts() external payable override nonReentrant {\\n        uint256 amount = msg.value;\\n        require(\\n            amount >= _stakingConfig.getMinStake(),\\n            \\\"StakingPool: value must be greater than min amount\\\"\\n        );\\n        ICertificateToken certificateToken = ICertificateToken(_stakingConfig.getCertTokenAddress());\\n        uint256 shares = certificateToken.bondsToShares(amount);\\n        certificateToken.mint(msg.sender, shares);\\n        emit Staked(msg.sender, amount, shares);\\n    }\\n\\n    function pushToBeaconMulti(bytes[] calldata pubkeys, bytes[] calldata signatures, bytes32[] calldata deposit_data_roots) public onlyOperator {\\n        uint256 pubkeysLen = pubkeys.length;\\n        require(pubkeysLen == signatures.length && signatures.length == deposit_data_roots.length, \\\"StakingPool: length are not equal\\\");\\n        require(address(this).balance >= 32 ether * pubkeysLen, \\\"pending ethers not enough\\\");\\n        IEigenPodManager eigenPodManager = IEigenPodManager(_stakingConfig.getEigenPodManagerAddress());\\n        for (uint i = 0; i < pubkeysLen; i++) {\\n            eigenPodManager.stake(pubkeys[i], signatures[i], deposit_data_roots[i]);\\n            emit PoolOnGoing(pubkeys[i]);\\n        }\\n    }\\n\\n\\n    function pushToBeacon(bytes calldata pubkey, bytes calldata signature, bytes32 deposit_data_root) public onlyOperator {\\n        require(address(this).balance >= 32 ether, \\\"pending ethers not enough\\\");\\n        IEigenPodManager(_stakingConfig.getEigenPodManagerAddress()).stake(pubkey, signature, deposit_data_root);\\n        emit PoolOnGoing(pubkey);\\n    }\\n\\n    function getFreeBalance() public view virtual returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n    * @notice Burns amount of certificate from msg.sender\\n     * @notice Returns native token immediately or via queue\\n     * @param receiverAddress address for receiving unstaked funds\\n     * @param shares amount of certificate token to unstake\\n     */\\n    function unstakeCerts(\\n        address receiverAddress,\\n        uint256 shares\\n    ) external {\\n        address ownerAddress = msg.sender;\\n        ICertificateToken certificateToken = ICertificateToken(_stakingConfig.getCertTokenAddress());\\n\\n        uint256 amount = certificateToken.sharesToBonds(shares);\\n        require(\\n            amount >= _stakingConfig.getMinUnstake(),\\n            \\\"StakingPool: value must be greater than min amount\\\"\\n        );\\n\\n        require(\\n            certificateToken.balanceOf(ownerAddress) >= shares,\\n            \\\"StakingPool: cannot unstake more than have on address\\\"\\n        );\\n        certificateToken.burn(ownerAddress, shares);\\n        _addIntoQueue(ownerAddress, receiverAddress, shares, amount);\\n    }\\n\\n    /**\\n     * @return Certificate token address\\n     */\\n    function getCert() external view virtual returns (address) {\\n        return _stakingConfig.getCertTokenAddress();\\n    }\\n\\n    function getEigenPodManager() external view virtual returns (address){\\n        return _stakingConfig.getEigenPodManagerAddress();\\n    }\\n\\n    function getMinStake() external view virtual returns (uint256){\\n        return _stakingConfig.getMinStake();\\n    }\\n\\n    function getMinUnstake() public view virtual override returns (uint256) {\\n        return _stakingConfig.getMinUnstake();\\n    }\\n\\n    function setDistributeGasLimit(uint256 newValue) external onlyGovernance {\\n        uint256 prevValue = _DISTRIBUTE_GAS_LIMIT;\\n        _DISTRIBUTE_GAS_LIMIT = newValue;\\n\\n        emit DistributeGasLimitChanged(prevValue, newValue);\\n    }\\n\\n    function getDistributeGasLimit() public view returns (uint256) {\\n        return _DISTRIBUTE_GAS_LIMIT;\\n    }\\n\\n    function _addIntoQueue(\\n        address owner,\\n        address claimer,\\n        uint256 shares,\\n        uint256 amount\\n    ) internal {\\n        require(\\n            amount != 0 && claimer != address(0),\\n            \\\"LiquidTokenStakingPool: zero input values\\\"\\n        );\\n        // each new request is placed at the end of the queue\\n        _pendingTotalUnstakes += amount;\\n        _pendingClaimers.push(claimer);\\n        _pendingRequests.push(amount);\\n        _pendingClaimerUnstakes[claimer] += amount;\\n        emit PendingUnstake(owner, claimer, amount, shares);\\n    }\\n\\n    function getTotalPendingUnstakes() public view returns (uint256) {\\n        return _pendingTotalUnstakes;\\n    }\\n\\n    function getPendingRequestsOf(\\n        address claimer\\n    ) public view returns (uint256[] memory) {\\n        uint256 j;\\n        uint256[] memory unstakes = new uint256[](\\n            _pendingClaimers.length - _pendingGap\\n        );\\n        for (uint256 i = _pendingGap; i < _pendingClaimers.length; i++) {\\n            if (_pendingClaimers[i] == claimer) {\\n                unstakes[j] = _pendingRequests[i];\\n                ++j;\\n            }\\n        }\\n        uint256 removeCells = unstakes.length - j;\\n        if (removeCells > 0) {\\n            assembly {\\n                mstore(unstakes, j)\\n            }\\n        }\\n        return unstakes;\\n    }\\n\\n    function getPendingUnstakesOf(\\n        address claimer\\n    ) public view returns (uint256) {\\n        return _pendingClaimerUnstakes[claimer];\\n    }\\n}\\n\",\"keccak256\":\"0x5eafebfc1baaaaf8fb50e943aa92633f654402cc81cc33b8157fa2bc8211f463\",\"license\":\"MIT\"},\"contracts/interfaces/ICertificateToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ICertificateToken is IERC20Upgradeable {\\n\\n    function sharesToBonds(uint256 amount) external view returns (uint256);\\n\\n    function bondsToShares(uint256 amount) external view returns (uint256);\\n\\n    function ratio() external view returns (uint256);\\n\\n    function isRebasing() external pure returns (bool);\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n}\",\"keccak256\":\"0xe09c64ab52911e0a4433191cac138576e9fa99af63325fe1213d39a8f263ec13\",\"license\":\"MIT\"},\"contracts/interfaces/IEigenPodManager.sol\":{\"content\":\"interface IEigenPodManager {\\n    /**\\n     * @notice Creates an EigenPod for the sender.\\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\\n     */\\n    function createPod() external;\\n\\n    /**\\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod. \\n     * Also creates an EigenPod for the sender if they don't have one already.\\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\\n     * @param signature The validator's signature of the deposit data.\\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\\n     */\\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n}\",\"keccak256\":\"0xeafa4aef767506c1d86d3d93c88acada64277185887c09525affaa0816f74b28\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IGovernable {\\n    event GovernanceAddressChanged(address prevValue, address newValue);\\n\\n    function getGovernanceAddress() external view returns (address);\\n    function setGovernanceAddress(address newValue) external;\\n}\",\"keccak256\":\"0xe4644174b723a10cad795e8448c91bf612d59a855fc80ea532f741cc4b000d96\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"./IGovernable.sol\\\";\\n\\ninterface IStakingConfig is IGovernable {\\n    event OperatorAddressChanged(address prevValue, address newValue);\\n    event TreasuryAddressChanged(address prevValue, address newValue);\\n    event RatioFeedAddressChanged(address prevValue, address newValue);\\n    event CertTokenAddressChanged(address prevValue, address newValue);\\n    event StakingPoolAddressChanged(address prevValue, address newValue);\\n    event EigenManagerAddressChanged(address prevValue, address newValue);\\n    event MinUnstakeChanged(uint256 prevValue, uint256 newValue);\\n    event MinStakeChanged(uint256 prevValue, uint256 newValue);\\n\\n    function getOperatorAddress() external view returns (address);\\n\\n    function getRatioFeedAddress() external view returns (address);\\n\\n    function getStakingPoolAddress() external view returns (address);\\n\\n    function getTreasuryAddress() external view returns (address);\\n\\n    function getEigenPodManagerAddress() external view returns (address);\\n\\n    function getCertTokenAddress() external view returns (address);\\n\\n    function getMinStake() external view returns (uint256);\\n\\n    function getMinUnstake() external view returns (uint256);\\n\\n    function setStakingPoolAddress(address newValue) external;\\n\\n    function setOperatorAddress(address newValue) external;\\n\\n    function setRatioFeedAddress(address newValue) external;\\n\\n    function setTreasuryAddress(address newValue) external;\\n\\n    function setCertTokenAddress(address newValue) external;\\n\\n    function setMinStake(uint256 newValue) external;\\n\\n    function setMinUnstake(uint256 newValue) external;\\n}\",\"keccak256\":\"0x4ce8a03f9908cfec0ef658d784ce1f3b88fbef1a12418ea9fe008ee69cf506fd\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IStakingPool {\\n    event Staked(\\n        address indexed staker,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    event PoolOnGoing(\\n        bytes pubkey\\n    );\\n\\n    event DistributeGasLimitChanged(uint256 prevValue, uint256 newValue);\\n\\n    event PendingUnstake(\\n        address indexed ownerAddress,\\n        address indexed receiverAddress,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    event Received(address indexed from, uint256 value);\\n\\n    function stakeCerts() external payable;\\n\\n    function getFreeBalance() external view returns (uint256);\\n\\n    function getMinStake() external view returns (uint256);\\n\\n    function getMinUnstake() external view returns (uint256);\\n\\n    function pushToBeaconMulti(bytes[] calldata pubkeys, bytes[] calldata signatures, bytes32[] calldata deposit_data_roots) external;\\n}\\n\",\"keccak256\":\"0x835cb67d55807027f979a36984557f1c6c06ae6a970973cfa298c587a99156bd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611951806100206000396000f3fe6080604052600436106100e85760003560e01c806356a3b5fa1161008a578063c664d38b11610059578063c664d38b1461025d578063cd6dc68714610272578063d0652e4214610292578063e93c4f15146102a757600080fd5b806356a3b5fa14610200578063ac76d45014610215578063afbcc4481461021d578063be9631e81461023d57600080fd5b8063126d5df6116100c6578063126d5df614610168578063183cdf241461017d578063409cb613146101aa57806346faa33c146101ca57600080fd5b806301ff923c146100ed578063034c445414610123578063042fc3a614610146575b600080fd5b3480156100f957600080fd5b5061010d6101083660046114a3565b6102ba565b60405161011a91906114c7565b60405180910390f35b34801561012f57600080fd5b506101386103d8565b60405190815260200161011a565b34801561015257600080fd5b5061016661016136600461150b565b61044a565b005b34801561017457600080fd5b50603654610138565b34801561018957600080fd5b50610192610577565b6040516001600160a01b03909116815260200161011a565b3480156101b657600080fd5b506101666101c5366004611524565b6105e5565b3480156101d657600080fd5b506101386101e53660046114a3565b6001600160a01b031660009081526038602052604090205490565b34801561020c57600080fd5b506101386108ad565b6101666108f7565b34801561022957600080fd5b5061016661023836600461159c565b610b14565b34801561024957600080fd5b50610166610258366004611678565b610e33565b34801561026957600080fd5b5061019261104b565b34801561027e57600080fd5b5061016661028d366004611524565b611095565b34801561029e57600080fd5b50603454610138565b3480156102b357600080fd5b5047610138565b60355460375460609160009182916102d191611702565b67ffffffffffffffff8111156102e9576102e961171b565b604051908082528060200260200182016040528015610312578160200160208202803683370190505b506035549091505b6037548110156103b457846001600160a01b03166037828154811061034157610341611731565b6000918252602090912001546001600160a01b0316036103a2576039818154811061036e5761036e611731565b906000526020600020015482848151811061038b5761038b611731565b602090810291909101015261039f83611747565b92505b806103ac81611747565b91505061031a565b5060008282516103c49190611702565b905080156103d0578282525b509392505050565b6033546040805162d3111560e21b815290516000926001600160a01b03169163034c44549160048083019260209291908290030181865afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190611760565b905090565b603360009054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c19190611779565b6001600160a01b0316336001600160a01b0316146105325760405162461bcd60e51b8152602060048201526024808201527f5374616b696e67506f6f6c3a206f6e6c7920676f7665726e616e636520616c6c6044820152631bddd95960e21b60648201526084015b60405180910390fd5b603480549082905560408051828152602081018490527f3bb2da990d30b0bc98e39d632b60814d66b3bae55947927dec7a75719de577de910160405180910390a15050565b60335460408051635eaad42760e11b815290516000926001600160a01b03169163bd55a84e9160048083019260209291908290030181865afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190611779565b60335460408051635eaad42760e11b8152905133926000926001600160a01b039091169163bd55a84e916004808201926020929091908290030181865afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190611779565b604051636c58d43d60e01b8152600481018590529091506000906001600160a01b03831690636c58d43d90602401602060405180830381865afa1580156106a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c79190611760565b9050603360009054906101000a90046001600160a01b03166001600160a01b031663034c44546040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190611760565b81101561075f5760405162461bcd60e51b815260040161052990611796565b6040516370a0823160e01b81526001600160a01b0384811660048301528591908416906370a0823190602401602060405180830381865afa1580156107a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cc9190611760565b10156108385760405162461bcd60e51b815260206004820152603560248201527f5374616b696e67506f6f6c3a2063616e6e6f7420756e7374616b65206d6f7265604482015274207468616e2068617665206f6e206164647265737360581b6064820152608401610529565b604051632770a7eb60e21b81526001600160a01b03848116600483015260248201869052831690639dc29fac90604401600060405180830381600087803b15801561088257600080fd5b505af1158015610896573d6000803e3d6000fd5b505050506108a683868684611278565b5050505050565b60335460408051632b51dafd60e11b815290516000926001600160a01b0316916356a3b5fa9160048083019260209291908290030181865afa158015610421573d6000803e3d6000fd5b6108ff6113f0565b60335460408051632b51dafd60e11b8152905134926001600160a01b0316916356a3b5fa9160048083019260209291908290030181865afa158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c9190611760565b81101561098b5760405162461bcd60e51b815260040161052990611796565b60335460408051635eaad42760e11b815290516000926001600160a01b03169163bd55a84e9160048083019260209291908290030181865afa1580156109d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f99190611779565b604051635361637360e01b8152600481018490529091506000906001600160a01b03831690635361637390602401602060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190611760565b6040516340c10f1960e01b8152336004820152602481018290529091506001600160a01b038316906340c10f1990604401600060405180830381600087803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b505060408051868152602081018590523393507f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9092500160405180910390a2505050610b1260018055565b565b603360009054906101000a90046001600160a01b03166001600160a01b0316632ec338ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190611779565b6001600160a01b0316336001600160a01b031614610bbb5760405162461bcd60e51b8152600401610529906117e8565b848381148015610bca57508382145b610c205760405162461bcd60e51b815260206004820152602160248201527f5374616b696e67506f6f6c3a206c656e67746820617265206e6f7420657175616044820152601b60fa1b6064820152608401610529565b610c33816801bc16d674ec80000061182b565b471015610c7e5760405162461bcd60e51b81526020600482015260196024820152780e0cadcc8d2dcce40cae8d0cae4e640dcdee840cadcdeeaced603b1b6044820152606401610529565b6033546040805163476c397360e11b815290516000926001600160a01b031691638ed872e69160048083019260209291908290030181865afa158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec9190611779565b905060005b82811015610e2857816001600160a01b0316639b4e46348a8a84818110610d1a57610d1a611731565b9050602002810190610d2c9190611842565b8a8a86818110610d3e57610d3e611731565b9050602002810190610d509190611842565b8a8a88818110610d6257610d62611731565b905060200201356040518663ffffffff1660e01b8152600401610d899594939291906118b2565b600060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050507f09bfa94ea4cf30558b9b9914b0029f04369c211b0e1f965f9fa7a29536b300df898983818110610dee57610dee611731565b9050602002810190610e009190611842565b604051610e0e9291906118ec565b60405180910390a180610e2081611747565b915050610cf1565b505050505050505050565b603360009054906101000a90046001600160a01b03166001600160a01b0316632ec338ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190611779565b6001600160a01b0316336001600160a01b031614610eda5760405162461bcd60e51b8152600401610529906117e8565b6801bc16d674ec800000471015610f2f5760405162461bcd60e51b81526020600482015260196024820152780e0cadcc8d2dcce40cae8d0cae4e640dcdee840cadcdeeaced603b1b6044820152606401610529565b603360009054906101000a90046001600160a01b03166001600160a01b0316638ed872e66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa69190611779565b6001600160a01b0316639b4e463486868686866040518663ffffffff1660e01b8152600401610fd99594939291906118b2565b600060405180830381600087803b158015610ff357600080fd5b505af1158015611007573d6000803e3d6000fd5b505050507f09bfa94ea4cf30558b9b9914b0029f04369c211b0e1f965f9fa7a29536b300df858560405161103c9291906118ec565b60405180910390a15050505050565b6033546040805163476c397360e11b815290516000926001600160a01b031691638ed872e69160048083019260209291908290030181865afa1580156105c1573d6000803e3d6000fd5b600054610100900460ff16158080156110b55750600054600160ff909116105b806110cf5750303b1580156110cf575060005460ff166001145b6111325760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610529565b6000805460ff191660011790558015611155576000805461ff0019166101001790555b603380546001600160a01b0319166001600160a01b0385169081179091556040805163476c397360e11b81529051638ed872e6916004808201926020929091908290030181865afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190611779565b6001600160a01b03166384d810626040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561120c57600080fd5b505af1158015611220573d6000803e3d6000fd5b5050505061122d82611449565b8015611273576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b801580159061128f57506001600160a01b03831615155b6112ed5760405162461bcd60e51b815260206004820152602960248201527f4c6971756964546f6b656e5374616b696e67506f6f6c3a207a65726f20696e7060448201526875742076616c75657360b81b6064820152608401610529565b80603660008282546112ff9190611908565b90915550506037805460018082019092557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b0386169081179091556039805492830190557fdc16fef70f8d5ddbc01ee3d903d1e69c18a3c7be080eb86a81e0578814ee58d39091018290556000908152603860205260408120805483929061139c908490611908565b909155505060408051828152602081018490526001600160a01b0380861692908716917fe8f73d529f5ced08581a2c18456a6530dbd0dddf94d8c98e0ab8f9883e2f4482910160405180910390a350505050565b6002600154036114425760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610529565b6002600155565b60348190556040805160008152602081018390527f3bb2da990d30b0bc98e39d632b60814d66b3bae55947927dec7a75719de577de910160405180910390a150565b6001600160a01b03811681146114a057600080fd5b50565b6000602082840312156114b557600080fd5b81356114c08161148b565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156114ff578351835292840192918401916001016114e3565b50909695505050505050565b60006020828403121561151d57600080fd5b5035919050565b6000806040838503121561153757600080fd5b82356115428161148b565b946020939093013593505050565b60008083601f84011261156257600080fd5b50813567ffffffffffffffff81111561157a57600080fd5b6020830191508360208260051b850101111561159557600080fd5b9250929050565b600080600080600080606087890312156115b557600080fd5b863567ffffffffffffffff808211156115cd57600080fd5b6115d98a838b01611550565b909850965060208901359150808211156115f257600080fd5b6115fe8a838b01611550565b9096509450604089013591508082111561161757600080fd5b5061162489828a01611550565b979a9699509497509295939492505050565b60008083601f84011261164857600080fd5b50813567ffffffffffffffff81111561166057600080fd5b60208301915083602082850101111561159557600080fd5b60008060008060006060868803121561169057600080fd5b853567ffffffffffffffff808211156116a857600080fd5b6116b489838a01611636565b909750955060208801359150808211156116cd57600080fd5b506116da88828901611636565b96999598509660400135949350505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611715576117156116ec565b92915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611759576117596116ec565b5060010190565b60006020828403121561177257600080fd5b5051919050565b60006020828403121561178b57600080fd5b81516114c08161148b565b60208082526032908201527f5374616b696e67506f6f6c3a2076616c7565206d757374206265206772656174604082015271195c881d1a185b881b5a5b88185b5bdd5b9d60721b606082015260800190565b60208082526023908201527f5374616b696e67506f6f6c3a206f6e6c7920636f6e73656e73757320616c6c6f6040820152621dd95960ea1b606082015260800190565b8082028115828204841417611715576117156116ec565b6000808335601e1984360301811261185957600080fd5b83018035915067ffffffffffffffff82111561187457600080fd5b60200191503681900382131561159557600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006118c6606083018789611889565b82810360208401526118d9818688611889565b9150508260408301529695505050505050565b602081526000611900602083018486611889565b949350505050565b80820180821115611715576117156116ec56fea264697066735822122020476b22e7dd72ec8525cebd3c740bec4c5d2d48316179f26c71f4d8b70a622e64736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c806356a3b5fa1161008a578063c664d38b11610059578063c664d38b1461025d578063cd6dc68714610272578063d0652e4214610292578063e93c4f15146102a757600080fd5b806356a3b5fa14610200578063ac76d45014610215578063afbcc4481461021d578063be9631e81461023d57600080fd5b8063126d5df6116100c6578063126d5df614610168578063183cdf241461017d578063409cb613146101aa57806346faa33c146101ca57600080fd5b806301ff923c146100ed578063034c445414610123578063042fc3a614610146575b600080fd5b3480156100f957600080fd5b5061010d6101083660046114a3565b6102ba565b60405161011a91906114c7565b60405180910390f35b34801561012f57600080fd5b506101386103d8565b60405190815260200161011a565b34801561015257600080fd5b5061016661016136600461150b565b61044a565b005b34801561017457600080fd5b50603654610138565b34801561018957600080fd5b50610192610577565b6040516001600160a01b03909116815260200161011a565b3480156101b657600080fd5b506101666101c5366004611524565b6105e5565b3480156101d657600080fd5b506101386101e53660046114a3565b6001600160a01b031660009081526038602052604090205490565b34801561020c57600080fd5b506101386108ad565b6101666108f7565b34801561022957600080fd5b5061016661023836600461159c565b610b14565b34801561024957600080fd5b50610166610258366004611678565b610e33565b34801561026957600080fd5b5061019261104b565b34801561027e57600080fd5b5061016661028d366004611524565b611095565b34801561029e57600080fd5b50603454610138565b3480156102b357600080fd5b5047610138565b60355460375460609160009182916102d191611702565b67ffffffffffffffff8111156102e9576102e961171b565b604051908082528060200260200182016040528015610312578160200160208202803683370190505b506035549091505b6037548110156103b457846001600160a01b03166037828154811061034157610341611731565b6000918252602090912001546001600160a01b0316036103a2576039818154811061036e5761036e611731565b906000526020600020015482848151811061038b5761038b611731565b602090810291909101015261039f83611747565b92505b806103ac81611747565b91505061031a565b5060008282516103c49190611702565b905080156103d0578282525b509392505050565b6033546040805162d3111560e21b815290516000926001600160a01b03169163034c44549160048083019260209291908290030181865afa158015610421573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190611760565b905090565b603360009054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa15801561049d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c19190611779565b6001600160a01b0316336001600160a01b0316146105325760405162461bcd60e51b8152602060048201526024808201527f5374616b696e67506f6f6c3a206f6e6c7920676f7665726e616e636520616c6c6044820152631bddd95960e21b60648201526084015b60405180910390fd5b603480549082905560408051828152602081018490527f3bb2da990d30b0bc98e39d632b60814d66b3bae55947927dec7a75719de577de910160405180910390a15050565b60335460408051635eaad42760e11b815290516000926001600160a01b03169163bd55a84e9160048083019260209291908290030181865afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104459190611779565b60335460408051635eaad42760e11b8152905133926000926001600160a01b039091169163bd55a84e916004808201926020929091908290030181865afa158015610634573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106589190611779565b604051636c58d43d60e01b8152600481018590529091506000906001600160a01b03831690636c58d43d90602401602060405180830381865afa1580156106a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c79190611760565b9050603360009054906101000a90046001600160a01b03166001600160a01b031663034c44546040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190611760565b81101561075f5760405162461bcd60e51b815260040161052990611796565b6040516370a0823160e01b81526001600160a01b0384811660048301528591908416906370a0823190602401602060405180830381865afa1580156107a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cc9190611760565b10156108385760405162461bcd60e51b815260206004820152603560248201527f5374616b696e67506f6f6c3a2063616e6e6f7420756e7374616b65206d6f7265604482015274207468616e2068617665206f6e206164647265737360581b6064820152608401610529565b604051632770a7eb60e21b81526001600160a01b03848116600483015260248201869052831690639dc29fac90604401600060405180830381600087803b15801561088257600080fd5b505af1158015610896573d6000803e3d6000fd5b505050506108a683868684611278565b5050505050565b60335460408051632b51dafd60e11b815290516000926001600160a01b0316916356a3b5fa9160048083019260209291908290030181865afa158015610421573d6000803e3d6000fd5b6108ff6113f0565b60335460408051632b51dafd60e11b8152905134926001600160a01b0316916356a3b5fa9160048083019260209291908290030181865afa158015610948573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096c9190611760565b81101561098b5760405162461bcd60e51b815260040161052990611796565b60335460408051635eaad42760e11b815290516000926001600160a01b03169163bd55a84e9160048083019260209291908290030181865afa1580156109d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f99190611779565b604051635361637360e01b8152600481018490529091506000906001600160a01b03831690635361637390602401602060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190611760565b6040516340c10f1960e01b8152336004820152602481018290529091506001600160a01b038316906340c10f1990604401600060405180830381600087803b158015610ab357600080fd5b505af1158015610ac7573d6000803e3d6000fd5b505060408051868152602081018590523393507f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee9092500160405180910390a2505050610b1260018055565b565b603360009054906101000a90046001600160a01b03166001600160a01b0316632ec338ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b67573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8b9190611779565b6001600160a01b0316336001600160a01b031614610bbb5760405162461bcd60e51b8152600401610529906117e8565b848381148015610bca57508382145b610c205760405162461bcd60e51b815260206004820152602160248201527f5374616b696e67506f6f6c3a206c656e67746820617265206e6f7420657175616044820152601b60fa1b6064820152608401610529565b610c33816801bc16d674ec80000061182b565b471015610c7e5760405162461bcd60e51b81526020600482015260196024820152780e0cadcc8d2dcce40cae8d0cae4e640dcdee840cadcdeeaced603b1b6044820152606401610529565b6033546040805163476c397360e11b815290516000926001600160a01b031691638ed872e69160048083019260209291908290030181865afa158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec9190611779565b905060005b82811015610e2857816001600160a01b0316639b4e46348a8a84818110610d1a57610d1a611731565b9050602002810190610d2c9190611842565b8a8a86818110610d3e57610d3e611731565b9050602002810190610d509190611842565b8a8a88818110610d6257610d62611731565b905060200201356040518663ffffffff1660e01b8152600401610d899594939291906118b2565b600060405180830381600087803b158015610da357600080fd5b505af1158015610db7573d6000803e3d6000fd5b505050507f09bfa94ea4cf30558b9b9914b0029f04369c211b0e1f965f9fa7a29536b300df898983818110610dee57610dee611731565b9050602002810190610e009190611842565b604051610e0e9291906118ec565b60405180910390a180610e2081611747565b915050610cf1565b505050505050505050565b603360009054906101000a90046001600160a01b03166001600160a01b0316632ec338ba6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190611779565b6001600160a01b0316336001600160a01b031614610eda5760405162461bcd60e51b8152600401610529906117e8565b6801bc16d674ec800000471015610f2f5760405162461bcd60e51b81526020600482015260196024820152780e0cadcc8d2dcce40cae8d0cae4e640dcdee840cadcdeeaced603b1b6044820152606401610529565b603360009054906101000a90046001600160a01b03166001600160a01b0316638ed872e66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa69190611779565b6001600160a01b0316639b4e463486868686866040518663ffffffff1660e01b8152600401610fd99594939291906118b2565b600060405180830381600087803b158015610ff357600080fd5b505af1158015611007573d6000803e3d6000fd5b505050507f09bfa94ea4cf30558b9b9914b0029f04369c211b0e1f965f9fa7a29536b300df858560405161103c9291906118ec565b60405180910390a15050505050565b6033546040805163476c397360e11b815290516000926001600160a01b031691638ed872e69160048083019260209291908290030181865afa1580156105c1573d6000803e3d6000fd5b600054610100900460ff16158080156110b55750600054600160ff909116105b806110cf5750303b1580156110cf575060005460ff166001145b6111325760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610529565b6000805460ff191660011790558015611155576000805461ff0019166101001790555b603380546001600160a01b0319166001600160a01b0385169081179091556040805163476c397360e11b81529051638ed872e6916004808201926020929091908290030181865afa1580156111ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d29190611779565b6001600160a01b03166384d810626040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561120c57600080fd5b505af1158015611220573d6000803e3d6000fd5b5050505061122d82611449565b8015611273576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b801580159061128f57506001600160a01b03831615155b6112ed5760405162461bcd60e51b815260206004820152602960248201527f4c6971756964546f6b656e5374616b696e67506f6f6c3a207a65726f20696e7060448201526875742076616c75657360b81b6064820152608401610529565b80603660008282546112ff9190611908565b90915550506037805460018082019092557f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae0180546001600160a01b0319166001600160a01b0386169081179091556039805492830190557fdc16fef70f8d5ddbc01ee3d903d1e69c18a3c7be080eb86a81e0578814ee58d39091018290556000908152603860205260408120805483929061139c908490611908565b909155505060408051828152602081018490526001600160a01b0380861692908716917fe8f73d529f5ced08581a2c18456a6530dbd0dddf94d8c98e0ab8f9883e2f4482910160405180910390a350505050565b6002600154036114425760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610529565b6002600155565b60348190556040805160008152602081018390527f3bb2da990d30b0bc98e39d632b60814d66b3bae55947927dec7a75719de577de910160405180910390a150565b6001600160a01b03811681146114a057600080fd5b50565b6000602082840312156114b557600080fd5b81356114c08161148b565b9392505050565b6020808252825182820181905260009190848201906040850190845b818110156114ff578351835292840192918401916001016114e3565b50909695505050505050565b60006020828403121561151d57600080fd5b5035919050565b6000806040838503121561153757600080fd5b82356115428161148b565b946020939093013593505050565b60008083601f84011261156257600080fd5b50813567ffffffffffffffff81111561157a57600080fd5b6020830191508360208260051b850101111561159557600080fd5b9250929050565b600080600080600080606087890312156115b557600080fd5b863567ffffffffffffffff808211156115cd57600080fd5b6115d98a838b01611550565b909850965060208901359150808211156115f257600080fd5b6115fe8a838b01611550565b9096509450604089013591508082111561161757600080fd5b5061162489828a01611550565b979a9699509497509295939492505050565b60008083601f84011261164857600080fd5b50813567ffffffffffffffff81111561166057600080fd5b60208301915083602082850101111561159557600080fd5b60008060008060006060868803121561169057600080fd5b853567ffffffffffffffff808211156116a857600080fd5b6116b489838a01611636565b909750955060208801359150808211156116cd57600080fd5b506116da88828901611636565b96999598509660400135949350505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115611715576117156116ec565b92915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201611759576117596116ec565b5060010190565b60006020828403121561177257600080fd5b5051919050565b60006020828403121561178b57600080fd5b81516114c08161148b565b60208082526032908201527f5374616b696e67506f6f6c3a2076616c7565206d757374206265206772656174604082015271195c881d1a185b881b5a5b88185b5bdd5b9d60721b606082015260800190565b60208082526023908201527f5374616b696e67506f6f6c3a206f6e6c7920636f6e73656e73757320616c6c6f6040820152621dd95960ea1b606082015260800190565b8082028115828204841417611715576117156116ec565b6000808335601e1984360301811261185957600080fd5b83018035915067ffffffffffffffff82111561187457600080fd5b60200191503681900382131561159557600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006118c6606083018789611889565b82810360208401526118d9818688611889565b9150508260408301529695505050505050565b602081526000611900602083018486611889565b949350505050565b80820180821115611715576117156116ec56fea264697066735822122020476b22e7dd72ec8525cebd3c740bec4c5d2d48316179f26c71f4d8b70a622e64736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "getCert()": {
        "returns": {
          "_0": "Certificate token address"
        }
      },
      "unstakeCerts(address,uint256)": {
        "params": {
          "receiverAddress": "address for receiving unstaked funds",
          "shares": "amount of certificate token to unstake"
        }
      }
    },
    "stateVariables": {
      "_stakingConfig": {
        "details": "external contracts"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "unstakeCerts(address,uint256)": {
        "notice": "Burns amount of certificate from msg.senderReturns native token immediately or via queue"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 314,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3622,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_stakingConfig",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IStakingConfig)4460"
      },
      {
        "astId": 3624,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_DISTRIBUTE_GAS_LIMIT",
        "offset": 0,
        "slot": "52",
        "type": "t_uint256"
      },
      {
        "astId": 3626,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_pendingGap",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 3628,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_pendingTotalUnstakes",
        "offset": 0,
        "slot": "54",
        "type": "t_uint256"
      },
      {
        "astId": 3631,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_pendingClaimers",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3635,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_pendingClaimerUnstakes",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3638,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "_pendingRequests",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3644,
        "contract": "contracts/StakingPool.sol:StakingPool",
        "label": "__reserved",
        "offset": 0,
        "slot": "58",
        "type": "t_array(t_uint256)45_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IStakingConfig)4460": {
        "encoding": "inplace",
        "label": "contract IStakingConfig",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}