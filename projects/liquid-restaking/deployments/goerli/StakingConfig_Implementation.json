{
  "address": "0x473E9b2e9cF5d7f01C54dB24A00E88E450b9DF97",
  "abi": [
    {
      "inputs": [],
      "name": "OnlyGovernanceAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyOperatorAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ICToken",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ICToken",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "CTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "EigenManagerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IEigenPodManager",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IEigenPodManager",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "EigenManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "GovernanceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MinStakeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevValue",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MinUnstakeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "OperatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IRatioFeed",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IRatioFeed",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "RatioFeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IRestakerDeployer",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IRestakerDeployer",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "RestakerDeployerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IRestakingPool",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IRestakingPool",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "RestakingPoolChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "prevValue",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getCToken",
      "outputs": [
        {
          "internalType": "contract ICToken",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCertTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEigenPodManager",
      "outputs": [
        {
          "internalType": "contract IEigenPodManager",
          "name": "manager",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEigenPodManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGovernance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinUnstake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRatioFeed",
      "outputs": [
        {
          "internalType": "contract IRatioFeed",
          "name": "feed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRatioFeedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRestakerDeployer",
      "outputs": [
        {
          "internalType": "contract IRestakerDeployer",
          "name": "deployer",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRestakingPool",
      "outputs": [
        {
          "internalType": "contract IRestakingPool",
          "name": "pool",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakingPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTreasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minimumUnstake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minimumStake",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "operatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governanceAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakingPoolAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "certTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ratioFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "eigenPodManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setCToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setGovernanceAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setMinStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "setMinUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setOperatorAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setRatioFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRestakerDeployer",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setRestakerDeployer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setRestakingPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52b54c603559b4b573da789ab72a944c5c8cf274a11fb205b7bb17c9149a2777",
  "receipt": {
    "to": null,
    "from": "0x05e0e5198820fb62cbf7684C4D920b6D7f92ff67",
    "contractAddress": "0x473E9b2e9cF5d7f01C54dB24A00E88E450b9DF97",
    "transactionIndex": 88,
    "gasUsed": "988781",
    "logsBloom": "0x
    "blockHash": "0xbdff762a745ddc6de96949f8ac08ee3c173b5ac47ca2a81b904acf9a04411f03",
    "transactionHash": "0x52b54c603559b4b573da789ab72a944c5c8cf274a11fb205b7bb17c9149a2777",
    "logs": [],
    "blockNumber": 10242438,
    "cumulativeGasUsed": "7872876",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "3858cd576652759db42e93fd9469f520",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlyGovernanceAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOperatorAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ICToken\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ICToken\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"CTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"EigenManagerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IEigenPodManager\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IEigenPodManager\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"EigenManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"GovernanceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinStakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MinUnstakeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRatioFeed\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IRatioFeed\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"RatioFeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRestakerDeployer\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IRestakerDeployer\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"RestakerDeployerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IRestakingPool\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IRestakingPool\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"RestakingPoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getCToken\",\"outputs\":[{\"internalType\":\"contract ICToken\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCertTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEigenPodManager\",\"outputs\":[{\"internalType\":\"contract IEigenPodManager\",\"name\":\"manager\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEigenPodManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGovernance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinUnstake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioFeed\",\"outputs\":[{\"internalType\":\"contract IRatioFeed\",\"name\":\"feed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRatioFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestakerDeployer\",\"outputs\":[{\"internalType\":\"contract IRestakerDeployer\",\"name\":\"deployer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRestakingPool\",\"outputs\":[{\"internalType\":\"contract IRestakingPool\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakingPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTreasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minimumUnstake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumStake\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"operatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governanceAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"certTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ratioFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"eigenPodManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setCToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setGovernanceAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"setMinUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setOperatorAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setRatioFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRestakerDeployer\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setRestakerDeployer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setRestakingPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"getCertTokenAddress()\":{\"details\":\"Deprecated.\"},\"getEigenPodManagerAddress()\":{\"details\":\"Deprecated.\"}},\"stateVariables\":{\"_minimumUnstake\":{\"details\":\"compact size, should be multiplied by 1 gwei\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingConfig.sol\":\"StakingConfig\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/StakingConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IStakingConfig.sol\\\";\\n\\ncontract StakingConfig is Initializable, IStakingConfig {\\n    /**\\n     * @dev compact size, should be multiplied by 1 gwei\\n     */\\n    uint64 internal _minimumUnstake;\\n    uint64 internal _minimumStake;\\n\\n    address internal _operatorAddress;\\n    address internal _governanceAddress;\\n    address internal _treasuryAddress;\\n    address internal _ratioFeedAddress;\\n    address internal _stakingPoolAddress;\\n    address internal _eigenPodManagerAddress;\\n    address internal _certTokenAddress;\\n    IRestakerDeployer internal _restakerDeployer;\\n\\n    modifier onlyGovernance() virtual {\\n        require(\\n            msg.sender == address(_governanceAddress),\\n            \\\"StakingConfig: only governance\\\"\\n        );\\n        _;\\n    }\\n\\n    function initialize(\\n        uint256 minimumUnstake,\\n        uint256 minimumStake,\\n        address operatorAddress,\\n        address governanceAddress,\\n        address treasuryAddress,\\n        address stakingPoolAddress,\\n        address certTokenAddress,\\n        address ratioFeed,\\n        address eigenPodManager\\n    ) external initializer {\\n        _setMinStake(minimumStake);\\n        _setMinUnstake(minimumUnstake);\\n        _operatorAddress = operatorAddress;\\n        emit OperatorChanged(address(0x00), operatorAddress);\\n        _certTokenAddress = certTokenAddress;\\n        emit CTokenChanged(ICToken(address(0)), ICToken(certTokenAddress));\\n        _governanceAddress = governanceAddress;\\n        emit GovernanceChanged(address(0), governanceAddress);\\n        _treasuryAddress = treasuryAddress;\\n        emit TreasuryChanged(address(0), treasuryAddress);\\n        _stakingPoolAddress = stakingPoolAddress;\\n        emit RestakingPoolChanged(\\n            IRestakingPool(address(0)),\\n            IRestakingPool(stakingPoolAddress)\\n        );\\n        _eigenPodManagerAddress = eigenPodManager;\\n        emit EigenManagerAddressChanged(address(0), eigenPodManager);\\n        _ratioFeedAddress = ratioFeed;\\n        emit RatioFeedChanged(IRatioFeed(address(0)), IRatioFeed(ratioFeed));\\n    }\\n\\n    function getOperator() external view override returns (address) {\\n        return _operatorAddress;\\n    }\\n\\n    function setOperatorAddress(address newValue) external onlyGovernance {\\n        require(newValue != address(0), \\\"StakingConfig: address can't be nil\\\");\\n        address prevValue = _operatorAddress;\\n        _operatorAddress = newValue;\\n        emit OperatorChanged(prevValue, newValue);\\n    }\\n\\n    function setGovernanceAddress(address newValue) external onlyGovernance {\\n        require(newValue != address(0), \\\"StakingConfig: address can't be nil\\\");\\n        address prevValue = _governanceAddress;\\n        _governanceAddress = newValue;\\n        emit GovernanceChanged(prevValue, newValue);\\n    }\\n\\n    function setRatioFeed(address newValue) external onlyGovernance {\\n        require(newValue != address(0), \\\"StakingConfig: address can't be nil\\\");\\n        address prevValue = _ratioFeedAddress;\\n        _ratioFeedAddress = newValue;\\n        emit RatioFeedChanged(IRatioFeed(prevValue), IRatioFeed(newValue));\\n    }\\n\\n    function setTreasury(address newValue) external onlyGovernance {\\n        require(newValue != address(0), \\\"StakingConfig: address can't be nil\\\");\\n        address prevValue = _treasuryAddress;\\n        _treasuryAddress = newValue;\\n        emit TreasuryChanged(prevValue, newValue);\\n    }\\n\\n    function setRestakingPool(address newValue) external onlyGovernance {\\n        require(newValue != address(0), \\\"StakingConfig: address can't be nil\\\");\\n        address prevValue = _stakingPoolAddress;\\n        _stakingPoolAddress = newValue;\\n        emit RestakingPoolChanged(\\n            IRestakingPool(prevValue),\\n            IRestakingPool(newValue)\\n        );\\n    }\\n\\n    function setCToken(address newValue) external onlyGovernance {\\n        require(newValue != address(0), \\\"StakingConfig: address can't be nil\\\");\\n        address prevValue = _certTokenAddress;\\n        _certTokenAddress = newValue;\\n        emit CTokenChanged(ICToken(prevValue), ICToken(newValue));\\n    }\\n\\n    function setRestakerDeployer(\\n        IRestakerDeployer newValue\\n    ) external onlyGovernance {\\n        require(\\n            address(newValue) != address(0),\\n            \\\"StakingConfig: address can't be nil\\\"\\n        );\\n        emit RestakerDeployerChanged(_restakerDeployer, newValue);\\n        _restakerDeployer = newValue;\\n    }\\n\\n    function getGovernance() external view override returns (address) {\\n        return _governanceAddress;\\n    }\\n\\n    function getStakingPoolAddress() public view override returns (address) {\\n        return _stakingPoolAddress;\\n    }\\n\\n    function getRatioFeedAddress() public view override returns (address) {\\n        return _ratioFeedAddress;\\n    }\\n\\n    /**\\n     * @dev Deprecated.\\n     */\\n    function getEigenPodManagerAddress()\\n        public\\n        view\\n        override\\n        returns (address)\\n    {\\n        return _eigenPodManagerAddress;\\n    }\\n\\n    /**\\n     * @dev Deprecated.\\n     */\\n    function getCertTokenAddress() public view override returns (address) {\\n        return _certTokenAddress;\\n    }\\n\\n    function getTreasury() external view override returns (address) {\\n        return _treasuryAddress;\\n    }\\n\\n    function getMinStake() public view virtual override returns (uint256) {\\n        return uint256(_minimumStake) * 1 gwei;\\n    }\\n\\n    function getMinUnstake() public view virtual override returns (uint256) {\\n        return uint256(_minimumUnstake) * 1 gwei;\\n    }\\n\\n    function setMinUnstake(uint256 newValue) external virtual onlyGovernance {\\n        _setMinUnstake(newValue);\\n    }\\n\\n    function _setMinUnstake(uint256 newValue) internal {\\n        require(\\n            newValue % 1 gwei == 0,\\n            \\\"StakingConfig: value should be multiplied of gwei\\\"\\n        );\\n        uint256 prevValue = getMinUnstake();\\n        _minimumUnstake = uint64(newValue / 1 gwei);\\n        require(\\n            _minimumUnstake * 1 gwei == newValue,\\n            \\\"StakingConfig: overflow\\\"\\n        );\\n        emit MinUnstakeChanged(prevValue, newValue);\\n    }\\n\\n    function setMinStake(uint256 newValue) external virtual onlyGovernance {\\n        _setMinStake(newValue);\\n    }\\n\\n    function _setMinStake(uint256 newValue) internal {\\n        require(\\n            newValue % 1 gwei == 0,\\n            \\\"StakingConfig: value should be multiplied of gwei\\\"\\n        );\\n        uint256 prevValue = getMinStake();\\n        _minimumStake = uint64(newValue / 1 gwei);\\n        require(_minimumStake * 1 gwei == newValue, \\\"StakingConfig: overflow\\\");\\n        emit MinStakeChanged(prevValue, newValue);\\n    }\\n\\n    function getCToken() external view override returns (ICToken token) {\\n        return ICToken(getCertTokenAddress());\\n    }\\n\\n    function getRatioFeed() external view override returns (IRatioFeed feed) {\\n        return IRatioFeed(getRatioFeedAddress());\\n    }\\n\\n    function getRestakingPool()\\n        external\\n        view\\n        override\\n        returns (IRestakingPool pool)\\n    {\\n        return IRestakingPool(getStakingPoolAddress());\\n    }\\n\\n    function getEigenPodManager()\\n        external\\n        view\\n        override\\n        returns (IEigenPodManager manager)\\n    {\\n        return IEigenPodManager(getEigenPodManagerAddress());\\n    }\\n\\n    function getRestakerDeployer()\\n        external\\n        view\\n        override\\n        returns (IRestakerDeployer deployer)\\n    {\\n        return _restakerDeployer;\\n    }\\n}\\n\",\"keccak256\":\"0xb83a335692ad4e5416e54b81422465f2a0ca3231bfd22dbc967a3f5594527b16\",\"license\":\"MIT\"},\"contracts/interfaces/IBeaconChainOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Interface for the BeaconStateOracle contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IBeaconChainOracle {\\n    /// @notice The block number to state root mapping.\\n    function timestampToBlockRoot(\\n        uint256 timestamp\\n    ) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcb95fb256da4858d301dd66af425fd1d361750e9e61c42ddaf7b9aff8455df7a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the cToken.\\n */\\ninterface ICToken is IERC20Upgradeable {\\n    /* errors */\\n\\n    error OnlyGovernanceAllowed();\\n    error OnlyOperatorAllowed();\\n    error OnlyRestakingPoolAllowed();\\n\\n    /* functions */\\n\\n    function convertToShares(\\n        uint256 amount\\n    ) external view returns (uint256 shares);\\n\\n    function convertToAmount(\\n        uint256 shares\\n    ) external view returns (uint256 amount);\\n\\n    function mint(address account, uint256 amount) external;\\n\\n    function burn(address account, uint256 amount) external;\\n\\n    function ratio() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfd79b0a939837551dcce867fce922f5038a5e997e3533dd9238005db850f124a\",\"license\":\"MIT\"},\"contracts/interfaces/IDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISignatureUtils.sol\\\";\\nimport \\\"./IStakeRegistryStub.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\n\\n/**\\n * @title DelegationManager\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in EigenLayer\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\\n */\\ninterface IDelegationManager is ISignatureUtils {\\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\\n    struct OperatorDetails {\\n        // @notice address to receive the rewards that the operator earns via serving applications built on EigenLayer.\\n        address earningsReceiver;\\n        /**\\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n         * @dev Signature verification follows these rules:\\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n         */\\n        address delegationApprover;\\n        /**\\n         * @notice A minimum delay -- measured in blocks -- enforced between:\\n         * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n         * and\\n         * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n         * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n         * then they are only allowed to either increase this value or keep it the same.\\n         */\\n        uint32 stakerOptOutWindowBlocks;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n     * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n     */\\n    struct StakerDelegation {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the staker's nonce\\n        uint256 nonce;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n     */\\n    struct DelegationApproval {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the operator's provided salt\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /// @notice Emitted when the StakeRegistry is set\\n    event StakeRegistrySet(IStakeRegistryStub stakeRegistry);\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\\n     * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct Withdrawal {\\n        // The address that originated the Withdrawal\\n        address staker;\\n        // The address that the staker was delegated to at the time that the Withdrawal was created\\n        address delegatedTo;\\n        // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n        address withdrawer;\\n        // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n        uint256 nonce;\\n        // Block number when the Withdrawal was created\\n        uint32 startBlock;\\n        // Array of strategies that the Withdrawal contains\\n        IStrategy[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n    }\\n\\n    struct QueuedWithdrawalParams {\\n        // Array of strategies that the QueuedWithdrawal contains\\n        IStrategy[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n        // The address of the withdrawer\\n        address withdrawer;\\n    }\\n\\n    // @notice Emitted when a new operator registers in EigenLayer and provides their OperatorDetails.\\n    event OperatorRegistered(\\n        address indexed operator,\\n        OperatorDetails operatorDetails\\n    );\\n\\n    /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n    event OperatorDetailsModified(\\n        address indexed operator,\\n        OperatorDetails newOperatorDetails\\n    );\\n\\n    /**\\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n     */\\n    event OperatorMetadataURIUpdated(\\n        address indexed operator,\\n        string metadataURI\\n    );\\n\\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesIncreased(\\n        address indexed operator,\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesDecreased(\\n        address indexed operator,\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted when @param staker delegates to @param operator.\\n    event StakerDelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker undelegates from @param operator.\\n    event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n    event StakerForceUndelegated(\\n        address indexed staker,\\n        address indexed operator\\n    );\\n\\n    /**\\n     * @notice Emitted when a new withdrawal is queued.\\n     * @param withdrawalRoot Is the hash of the `withdrawal`.\\n     * @param withdrawal Is the withdrawal itself.\\n     */\\n    event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\\n\\n    /// @notice Emitted when a queued withdrawal is completed\\n    event WithdrawalCompleted(bytes32 withdrawalRoot);\\n\\n    /// @notice Emitted when a queued withdrawal is *migrated* from the StrategyManager to the DelegationManager\\n    event WithdrawalMigrated(\\n        bytes32 oldWithdrawalRoot,\\n        bytes32 newWithdrawalRoot\\n    );\\n\\n    /// @notice Emitted when the `withdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event WithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\\n\\n    /**\\n     * @notice Caller delegates their stake to an operator.\\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n     * @param approverSalt A unique single use value tied to an individual signature.\\n     * @dev The approverSignatureAndExpiry is used in the event that:\\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n     *                  AND\\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateTo(\\n        address operator,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n     * @param staker The account delegating stake to an `operator` account\\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n     *\\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n     * is the `msg.sender`, then approval is assumed.\\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateToBySignature(\\n        address staker,\\n        address operator,\\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \\\"undelegation limbo\\\" mode of the EigenPodManager\\n     * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\\n     * @param staker The account to be undelegated.\\n     * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n     *\\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n     * @dev Reverts if the `staker` is already undelegated.\\n     */\\n    function undelegate(\\n        address staker\\n    ) external returns (bytes32 withdrawalRoot);\\n\\n    /**\\n     * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\\n     * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\\n     * their operator.\\n     *\\n     * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\\n     */\\n    function queueWithdrawals(\\n        QueuedWithdrawalParams[] calldata queuedWithdrawalParams\\n    ) external returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n     * @param withdrawal The Withdrawal to complete.\\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\\n     * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n     * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n     * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n     * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n     * any other strategies, which will be transferred to the withdrawer.\\n     */\\n    function completeQueuedWithdrawal(\\n        Withdrawal calldata withdrawal,\\n        IERC20[] calldata tokens,\\n        uint256 middlewareTimesIndex,\\n        bool receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Array-ified version of `completeQueuedWithdrawal`.\\n     * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n     * @param withdrawals The Withdrawals to complete.\\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\\n     * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\\n     */\\n    function completeQueuedWithdrawals(\\n        Withdrawal[] calldata withdrawals,\\n        IERC20[][] calldata tokens,\\n        uint256[] calldata middlewareTimesIndexes,\\n        bool[] calldata receiveAsTokens\\n    ) external;\\n\\n    /// @notice the address of the StakeRegistry contract to call for stake updates when operator shares are changed\\n    function stakeRegistry() external view returns (IStakeRegistryStub);\\n\\n    /**\\n     * @notice returns the address of the operator that `staker` is delegated to.\\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n     */\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /**\\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\\n     */\\n    function operatorDetails(\\n        address operator\\n    ) external view returns (OperatorDetails memory);\\n\\n    /*\\n     * @notice Returns the earnings receiver address for an operator\\n     */\\n    function earningsReceiver(address operator) external view returns (address);\\n\\n    /**\\n     * @notice Returns the delegationApprover account for an operator\\n     */\\n    function delegationApprover(\\n        address operator\\n    ) external view returns (address);\\n\\n    /**\\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\\n     */\\n    function stakerOptOutWindowBlocks(\\n        address operator\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n     * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\\n     * @dev By design, the following invariant should hold for each Strategy:\\n     * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n     * = sum (delegateable shares of all stakers delegated to the operator)\\n     */\\n    function operatorShares(\\n        address operator,\\n        IStrategy strategy\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n     */\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true is an operator has previously registered for delegation.\\n     */\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n    function stakerNonce(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n     */\\n    function delegationApproverSaltIsSpent(\\n        address _delegationApprover,\\n        bytes32 salt\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n     * @param staker The signing staker\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateCurrentStakerDelegationDigestHash(\\n        address staker,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n     * @param staker The signing staker\\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateStakerDelegationDigestHash(\\n        address staker,\\n        uint256 _stakerNonce,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n     * @param staker The account delegating their stake\\n     * @param operator The account receiving delegated stake\\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n     * @param approverSalt A unique and single use value associated with the approver signature.\\n     * @param expiry Time after which the approver's signature becomes invalid\\n     */\\n    function calculateDelegationApprovalDigestHash(\\n        address staker,\\n        address operator,\\n        address _delegationApprover,\\n        bytes32 approverSalt,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n    function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n    /**\\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\\n     *\\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n     * for more detailed information please read EIP-712.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n    function cumulativeWithdrawalsQueued(\\n        address staker\\n    ) external view returns (uint256);\\n\\n    /// @notice Returns the keccak256 hash of `withdrawal`.\\n    function calculateWithdrawalRoot(\\n        Withdrawal memory withdrawal\\n    ) external pure returns (bytes32);\\n\\n    function migrateQueuedWithdrawals(\\n        IStrategyManager.DeprecatedStruct_QueuedWithdrawal[]\\n            memory withdrawalsToQueue\\n    ) external;\\n}\\n\",\"keccak256\":\"0x02407c78b5ba8506060ae480d015e133f389eac96d007ddd8ab043ee79ce7cba\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IETHPOSDeposit.sol\":{\"content\":\"// \\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u250f\\u2513\\u2501\\u250f\\u2513\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2501\\u2501\\u2501\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u2513\\u2501\\n// \\u2503\\u250f\\u2501\\u2501\\u251b\\u250f\\u251b\\u2517\\u2513\\u2503\\u2503\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2517\\u2513\\u250f\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2503\\u250f\\u2501\\u2513\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u2513\\n// \\u2503\\u2517\\u2501\\u2501\\u2513\\u2517\\u2513\\u250f\\u251b\\u2503\\u2517\\u2501\\u2513\\u2517\\u251b\\u250f\\u251b\\u2503\\u2501\\u2501\\u2503\\u2503\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2503\\u2503\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u250f\\u2513\\u2517\\u2513\\u250f\\u251b\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u2517\\u251b\\u250f\\u2501\\u2501\\u2513\\u250f\\u2501\\u2513\\u2501\\u2517\\u2513\\u250f\\u251b\\u250f\\u2501\\u2513\\u250f\\u2501\\u2501\\u2513\\u2501\\u250f\\u2501\\u2501\\u2513\\u2517\\u2513\\u250f\\u251b\\n// \\u2503\\u250f\\u2501\\u2501\\u251b\\u2501\\u2503\\u2503\\u2501\\u2503\\u250f\\u2513\\u2503\\u250f\\u2501\\u251b\\u250f\\u251b\\u2501\\u2501\\u2503\\u2503\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2503\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2503\\u2503\\u2501\\u2501\\u252b\\u2523\\u252b\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u250f\\u2513\\u2503\\u250f\\u2513\\u2503\\u2503\\u250f\\u2513\\u2513\\u2501\\u2503\\u2503\\u2501\\u2503\\u250f\\u251b\\u2517\\u2501\\u2513\\u2503\\u2501\\u2503\\u250f\\u2501\\u251b\\u2501\\u2503\\u2503\\u2501\\n// \\u2503\\u2517\\u2501\\u2501\\u2513\\u2501\\u2503\\u2517\\u2513\\u2503\\u2503\\u2503\\u2503\\u2503\\u2503\\u2517\\u2501\\u2513\\u250f\\u2513\\u2503\\u2517\\u2501\\u251b\\u2503\\u2501\\u2501\\u2501\\u2501\\u250f\\u251b\\u2517\\u251b\\u2503\\u2503\\u2503\\u2501\\u252b\\u2503\\u2517\\u251b\\u2503\\u2503\\u2517\\u251b\\u2503\\u2523\\u2501\\u2501\\u2503\\u2503\\u2503\\u2501\\u2503\\u2517\\u2513\\u2501\\u2501\\u2501\\u2501\\u2503\\u2517\\u2501\\u251b\\u2503\\u2503\\u2517\\u251b\\u2503\\u2503\\u2503\\u2503\\u2503\\u2501\\u2503\\u2517\\u2513\\u2503\\u2503\\u2501\\u2503\\u2517\\u251b\\u2517\\u2513\\u2503\\u2517\\u2501\\u2513\\u2501\\u2503\\u2517\\u2513\\n// \\u2517\\u2501\\u2501\\u2501\\u251b\\u2501\\u2517\\u2501\\u251b\\u2517\\u251b\\u2517\\u251b\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u251b\\u2517\\u2501\\u2501\\u2501\\u251b\\u2501\\u2501\\u2501\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2503\\u250f\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u251b\\u2501\\u2501\\u2501\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2517\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u251b\\u2517\\u251b\\u2501\\u2517\\u2501\\u2501\\u2501\\u251b\\u2517\\u2501\\u2501\\u251b\\u2501\\u2517\\u2501\\u251b\\n// \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2503\\u2503\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n// \\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2517\\u251b\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\u2501\\n\\n// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity >=0.5.0;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IETHPOSDeposit {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xaffc4c806a4e2b898926a981e508126eb38a57bf7ee3466f68c904f00b6ff8b1\",\"license\":\"CC0-1.0\"},\"contracts/interfaces/IEigenPod.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/BeaconChainProofs.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice The main functionalities are:\\n * - creating new ETH validators with their withdrawal credentials pointed to this contract\\n * - proving from beacon chain state roots that withdrawal credentials are pointed to this contract\\n * - proving from beacon chain state roots the balances of ETH validators with their withdrawal credentials\\n *   pointed to this contract\\n * - updating aggregate balances in the EigenPodManager\\n * - withdrawing eth when withdrawals are initiated\\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\\n */\\ninterface IEigenPod {\\n    enum VALIDATOR_STATUS {\\n        INACTIVE, // doesnt exist\\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\\n        WITHDRAWN // withdrawn from the Beacon Chain\\n    }\\n\\n    struct ValidatorInfo {\\n        // index of the validator in the beacon chain\\n        uint64 validatorIndex;\\n        // amount of beacon chain ETH restaked on EigenLayer in gwei\\n        uint64 restakedBalanceGwei;\\n        //timestamp of the validator's most recent balance update\\n        uint64 mostRecentBalanceUpdateTimestamp;\\n        // status of the validator\\n        VALIDATOR_STATUS status;\\n    }\\n\\n    /**\\n     * @notice struct used to store amounts related to proven withdrawals in memory. Used to help\\n     * manage stack depth and optimize the number of external calls, when batching withdrawal operations.\\n     */\\n    struct VerifiedWithdrawal {\\n        // amount to send to a podOwner from a proven withdrawal\\n        uint256 amountToSendGwei;\\n        // difference in shares to be recorded in the eigenPodManager, as a result of the withdrawal\\n        int256 sharesDeltaGwei;\\n    }\\n\\n    enum PARTIAL_WITHDRAWAL_CLAIM_STATUS {\\n        REDEEMED,\\n        PENDING,\\n        FAILED\\n    }\\n\\n    /// @notice Emitted when an ETH validator stakes via this eigenPod\\n    event EigenPodStaked(bytes pubkey);\\n\\n    /// @notice Emitted when an ETH validator's withdrawal credentials are successfully verified to be pointed to this eigenPod\\n    event ValidatorRestaked(uint40 validatorIndex);\\n\\n    /// @notice Emitted when an ETH validator's  balance is proven to be updated.  Here newValidatorBalanceGwei\\n    //  is the validator's balance that is credited on EigenLayer.\\n    event ValidatorBalanceUpdated(\\n        uint40 validatorIndex,\\n        uint64 balanceTimestamp,\\n        uint64 newValidatorBalanceGwei\\n    );\\n\\n    /// @notice Emitted when an ETH validator is prove to have withdrawn from the beacon chain\\n    event FullWithdrawalRedeemed(\\n        uint40 validatorIndex,\\n        uint64 withdrawalTimestamp,\\n        address indexed recipient,\\n        uint64 withdrawalAmountGwei\\n    );\\n\\n    /// @notice Emitted when a partial withdrawal claim is successfully redeemed\\n    event PartialWithdrawalRedeemed(\\n        uint40 validatorIndex,\\n        uint64 withdrawalTimestamp,\\n        address indexed recipient,\\n        uint64 partialWithdrawalAmountGwei\\n    );\\n\\n    /// @notice Emitted when restaked beacon chain ETH is withdrawn from the eigenPod.\\n    event RestakedBeaconChainETHWithdrawn(\\n        address indexed recipient,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when podOwner enables restaking\\n    event RestakingActivated(address indexed podOwner);\\n\\n    /// @notice Emitted when ETH is received via the `receive` fallback\\n    event NonBeaconChainETHReceived(uint256 amountReceived);\\n\\n    /// @notice Emitted when ETH that was previously received via the `receive` fallback is withdrawn\\n    event NonBeaconChainETHWithdrawn(\\n        address indexed recipient,\\n        uint256 amountWithdrawn\\n    );\\n\\n    /// @notice The max amount of eth, in gwei, that can be restaked per validator\\n    function MAX_RESTAKED_BALANCE_GWEI_PER_VALIDATOR()\\n        external\\n        view\\n        returns (uint64);\\n\\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer),\\n    function withdrawableRestakedExecutionLayerGwei()\\n        external\\n        view\\n        returns (uint64);\\n\\n    /// @notice any ETH deposited into the EigenPod contract via the `receive` fallback function\\n    function nonBeaconChainETHBalanceWei() external view returns (uint256);\\n\\n    /// @notice The single EigenPodManager for EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice The owner of this EigenPod\\n    function podOwner() external view returns (address);\\n\\n    /// @notice an indicator of whether or not the podOwner has ever \\\"fully restaked\\\" by successfully calling `verifyCorrectWithdrawalCredentials`.\\n    function hasRestaked() external view returns (bool);\\n\\n    /**\\n     * @notice The latest timestamp at which the pod owner withdrew the balance of the pod, via calling `withdrawBeforeRestaking`.\\n     * @dev This variable is only updated when the `withdrawBeforeRestaking` function is called, which can only occur before `hasRestaked` is set to true for this pod.\\n     * Proofs for this pod are only valid against Beacon Chain state roots corresponding to timestamps after the stored `mostRecentWithdrawalTimestamp`.\\n     */\\n    function mostRecentWithdrawalTimestamp() external view returns (uint64);\\n\\n    /// @notice Returns the validatorInfo struct for the provided pubkeyHash\\n    function validatorPubkeyHashToInfo(\\n        bytes32 validatorPubkeyHash\\n    ) external view returns (ValidatorInfo memory);\\n\\n    ///@notice mapping that tracks proven withdrawals\\n    function provenWithdrawal(\\n        bytes32 validatorPubkeyHash,\\n        uint64 slot\\n    ) external view returns (bool);\\n\\n    /// @notice This returns the status of a given validator\\n    function validatorStatus(\\n        bytes32 pubkeyHash\\n    ) external view returns (VALIDATOR_STATUS);\\n\\n    /**\\n     * @notice This function verifies that the withdrawal credentials of validator(s) owned by the podOwner are pointed to\\n     * this contract. It also verifies the effective balance  of the validator.  It verifies the provided proof of the ETH validator against the beacon chain state\\n     * root, marks the validator as 'active' in EigenLayer, and credits the restaked ETH in Eigenlayer.\\n     * @param oracleTimestamp is the Beacon Chain timestamp whose state root the `proof` will be proven against.\\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs\\n     * @param withdrawalCredentialProofs is an array of proofs, where each proof proves each ETH validator's balance and withdrawal credentials\\n     * against a beacon chain state root\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * for details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyWithdrawalCredentials(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        uint40[] calldata validatorIndices,\\n        bytes[] calldata withdrawalCredentialProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external;\\n\\n    /**\\n     * @notice This function records an update (either increase or decrease) in the pod's balance in the StrategyManager.  \\n               It also verifies a merkle proof of the validator's current beacon chain balance.  \\n     * @param oracleTimestamp The oracleTimestamp whose state root the `proof` will be proven against.\\n     *        Must be within `VERIFY_BALANCE_UPDATE_WINDOW_SECONDS` of the current block.\\n     * @param validatorIndices is the list of indices of the validators being proven, refer to consensus specs \\n     * @param balanceUpdateProofs is the proof of the validator's balance and validatorFields in the balance tree and the balanceRoot to prove for\\n     *                                    the StrategyManager in case it must be removed from the list of the podOwner's strategies\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * @dev For more details on the Beacon Chain spec, see: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyBalanceUpdates(\\n        uint64 oracleTimestamp,\\n        uint40[] calldata validatorIndices,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        BeaconChainProofs.BalanceUpdateProof[] calldata balanceUpdateProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external;\\n\\n    /**\\n     * @notice This function records full and partial withdrawals on behalf of one of the Ethereum validators for this EigenPod\\n     * @param oracleTimestamp is the timestamp of the oracle slot that the withdrawal is being proven against\\n     * @param withdrawalProofs is the information needed to check the veracity of the block numbers and withdrawals being proven\\n     * @param validatorFieldsProofs is the proof of the validator's fields' in the validator tree\\n     * @param withdrawalFields are the fields of the withdrawals being proven\\n     * @param validatorFields are the fields of the validators being proven\\n     */\\n    function verifyAndProcessWithdrawals(\\n        uint64 oracleTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        BeaconChainProofs.WithdrawalProof[] calldata withdrawalProofs,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields,\\n        bytes32[][] calldata withdrawalFields\\n    ) external;\\n\\n    /**\\n     * @notice Called by the pod owner to activate restaking by withdrawing\\n     * all existing ETH from the pod and preventing further withdrawals via\\n     * \\\"withdrawBeforeRestaking()\\\"\\n     */\\n    function activateRestaking() external;\\n\\n    /// @notice Called by the pod owner to withdraw the balance of the pod when `hasRestaked` is set to false\\n    function withdrawBeforeRestaking() external;\\n\\n    /// @notice Called by the pod owner to withdraw the nonBeaconChainETHBalanceWei\\n    function withdrawNonBeaconChainETHBalanceWei(\\n        address recipient,\\n        uint256 amountToWithdraw\\n    ) external;\\n\\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\\n    function recoverTokens(\\n        IERC20[] memory tokenList,\\n        uint256[] memory amountsToWithdraw,\\n        address recipient\\n    ) external;\\n\\n    function initialize(address _podOwner) external;\\n}\\n\",\"keccak256\":\"0xcfa42ac6f5b18b8e002e8a0a79be04ca7ad6bf881c57141d5984808514d3fc65\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IEigenPodManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./IETHPOSDeposit.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IEigenPod.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\n/**\\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\n\\ninterface IEigenPodManager {\\n    /// @notice Emitted to notify the update of the beaconChainOracle address\\n    event BeaconOracleUpdated(address indexed newOracleAddress);\\n\\n    /// @notice Emitted to notify the deployment of an EigenPod\\n    event PodDeployed(address indexed eigenPod, address indexed podOwner);\\n\\n    /// @notice Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\\n    event BeaconChainETHDeposited(address indexed podOwner, uint256 amount);\\n\\n    /// @notice Emitted when `maxPods` value is updated from `previousValue` to `newValue`\\n    event MaxPodsUpdated(uint256 previousValue, uint256 newValue);\\n\\n    /// @notice Emitted when a withdrawal of beacon chain ETH is completed\\n    event BeaconChainETHWithdrawalCompleted(\\n        address indexed podOwner,\\n        uint256 shares,\\n        uint96 nonce,\\n        address delegatedAddress,\\n        address withdrawer,\\n        bytes32 withdrawalRoot\\n    );\\n\\n    /**\\n     * @notice Creates an EigenPod for the sender.\\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\\n     * @dev Returns EigenPod address\\n     */\\n    function createPod() external returns (address);\\n\\n    /**\\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\\n     * Also creates an EigenPod for the sender if they don't have one already.\\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\\n     * @param signature The validator's signature of the deposit data.\\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\\n     */\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable;\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\\n    function ownerToPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\\n    function getPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice The ETH2 Deposit Contract\\n    function ethPOS() external view returns (IETHPOSDeposit);\\n\\n    /// @notice Beacon proxy to which the EigenPods point\\n    function eigenPodBeacon() external view returns (IBeacon);\\n\\n    /// @notice Oracle contract that provides updates to the beacon chain's state\\n    function beaconChainOracle() external view returns (IBeaconChainOracle);\\n\\n    /// @notice Returns the beacon block root at `timestamp`. Reverts if the Beacon block root at `timestamp` has not yet been finalized.\\n    function getBlockRootAtTimestamp(\\n        uint64 timestamp\\n    ) external view returns (bytes32);\\n\\n    /// @notice EigenLayer's StrategyManager contract\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice EigenLayer's Slasher contract\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\\n    function hasPod(address podOwner) external view returns (bool);\\n\\n    /// @notice Returns the number of EigenPods that have been created\\n    function numPods() external view returns (uint256);\\n\\n    /// @notice Returns the maximum number of EigenPods that can be created\\n    function maxPods() external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\\n     * @dev The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can\\n     * decrease between the pod owner queuing and completing a withdrawal.\\n     * When the pod owner's shares would otherwise increase, this \\\"deficit\\\" is decreased first _instead_.\\n     * Likewise, when a withdrawal is completed, this \\\"deficit\\\" is decreased and the withdrawal amount is decreased; We can think of this\\n     * as the withdrawal \\\"paying off the deficit\\\".\\n     */\\n    function podOwnerShares(address podOwner) external view returns (int256);\\n\\n    /// @notice returns canonical, virtual beaconChainETH strategy\\n    function beaconChainETHStrategy() external view returns (IStrategy);\\n}\\n\",\"keccak256\":\"0x48e928005aed1833fa3f413b8df72c15d27404e6997316630f4878765b742823\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IProtocolConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IRatioFeed.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IRestakingPool.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\nimport \\\"../restaker/IRestakerDeployer.sol\\\";\\n\\ninterface IProtocolConfig {\\n    /* errors */\\n\\n    error OnlyGovernanceAllowed();\\n    error OnlyOperatorAllowed();\\n\\n    /* events */\\n\\n    event OperatorChanged(address prevValue, address newValue);\\n    event GovernanceChanged(address prevValue, address newValue);\\n    event TreasuryChanged(address prevValue, address newValue);\\n    event RatioFeedChanged(IRatioFeed prevValue, IRatioFeed newValue);\\n    event CTokenChanged(ICToken prevValue, ICToken newValue);\\n    event RestakingPoolChanged(\\n        IRestakingPool prevValue,\\n        IRestakingPool newValue\\n    );\\n    event EigenManagerChanged(\\n        IEigenPodManager prevValue,\\n        IEigenPodManager newValue\\n    );\\n    event RestakerDeployerChanged(\\n        IRestakerDeployer prevValue,\\n        IRestakerDeployer newValue\\n    );\\n\\n    /* functions */\\n\\n    function getGovernance() external view returns (address governance);\\n\\n    function getTreasury() external view returns (address treasury);\\n\\n    function getOperator() external view returns (address operator);\\n\\n    function getCToken() external view returns (ICToken token);\\n\\n    function getRatioFeed() external view returns (IRatioFeed feed);\\n\\n    function getRestakingPool() external view returns (IRestakingPool pool);\\n\\n    function getEigenPodManager()\\n        external\\n        view\\n        returns (IEigenPodManager manager);\\n\\n    function getRestakerDeployer()\\n        external\\n        view\\n        returns (IRestakerDeployer deployer);\\n}\\n\",\"keccak256\":\"0xb352b70f1d4d6a8143edbdfbed3d24cf5068ead340f8a5452d2ea04e9f73326f\",\"license\":\"MIT\"},\"contracts/interfaces/IRatioFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IRatioFeed {\\n    /* errors */\\n\\n    error OnlyGovernanceAllowed();\\n    error OnlyOperatorAllowed();\\n\\n    error RatioThresholdNotSet();\\n    error RatioNotUpdated(string reason);\\n    error RatioThresholdNotInRange();\\n\\n    struct HistoricalRatios {\\n        uint64[9] historicalRatios;\\n        uint40 lastUpdate;\\n    }\\n\\n    event RatioThresholdChanged(uint256 oldValue, uint256 newValue);\\n    event RatioUpdated(\\n        address indexed tokenAddress,\\n        uint256 oldRatio,\\n        uint256 newRatio\\n    );\\n\\n    function updateRatio(address token, uint256 ratio) external;\\n    function getRatio(address token) external view returns (uint256 ratio);\\n}\\n\",\"keccak256\":\"0x1d0efd5fd3451a3309c0ba32c8559d1f14b18eab627c59c54b9f4b9a0f9f8307\",\"license\":\"MIT\"},\"contracts/interfaces/IRestakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IRestakingPool {\\n    /* structs */\\n\\n    struct Unstake {\\n        address recipient;\\n        uint256 amount;\\n    }\\n\\n    /* errors */\\n\\n    error OnlyGovernanceAllowed();\\n    error OnlyOperatorAllowed();\\n\\n    error PoolZeroAmount();\\n    error PoolZeroAddress();\\n    error PoolRestakerExists();\\n    error PoolRestakerNotExists();\\n    error PoolInsufficientBalance();\\n    error PoolWrongInputLength();\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error PoolFailedInnerCall();\\n\\n    error PoolDistributeGasLimitNotInRange(uint64 max);\\n    error PoolDistributeGasLimitNotSet();\\n\\n    error PoolStakeAmLessThanMin();\\n    error PoolUnstakeAmLessThanMin();\\n\\n    /* events */\\n\\n    event Received(address indexed sender, uint256 amount);\\n\\n    event RestakerAdded(string indexed provider, address restaker);\\n\\n    event Staked(address indexed staker, uint256 amount, uint256 shares);\\n\\n    event Unstaked(\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    event Deposited(string indexed provider, bytes[] pubkeys);\\n\\n    event DistributeGasLimitChanged(uint32 prevValue, uint32 newValue);\\n\\n    event PendingUnstake(\\n        address indexed ownerAddress,\\n        address indexed receiverAddress,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Deprecated.\\n     */\\n    event RewardsDistributed(address[] claimers, uint256[] amounts);\\n\\n    event UnstakesDistributed(Unstake[] unstakes);\\n\\n    event ClaimExpected(address indexed claimer, uint256 value);\\n\\n    event UnstakeClaimed(\\n        address indexed claimer,\\n        address indexed caller,\\n        uint256 value\\n    );\\n\\n    /* functions */\\n\\n    function getMinStake() external view returns (uint256);\\n\\n    function getMinUnstake() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbe908eb4a0d40e007ab244b53ba65636944d4b8c67c3d2eeb640792f58ef3e06\",\"license\":\"MIT\"},\"contracts/interfaces/ISignatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title The interface for common signature utilities.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface ISignatureUtils {\\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithSaltAndExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the salt used to generate the signature\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n}\\n\",\"keccak256\":\"0x3b62ea6ee304cbab976ff206bcf55268f18a3291708021557f93f899f99862e4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISlasher.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n    // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n    struct MiddlewareTimes {\\n        // The update block for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n        uint32 stalestUpdateBlock;\\n        // The latest 'serveUntilBlock' from all of the middleware that the operator is serving\\n        uint32 latestServeUntilBlock;\\n    }\\n\\n    // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n    struct MiddlewareDetails {\\n        // the block at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n        uint32 registrationMayBeginAtBlock;\\n        // the block before which the contract is allowed to slash the user\\n        uint32 contractCanSlashOperatorUntilBlock;\\n        // the block at which the middleware's view of the operator's stake was most recently updated\\n        uint32 latestUpdateBlock;\\n    }\\n\\n    /// @notice Emitted when a middleware times is added to `operator`'s array.\\n    event MiddlewareTimesAdded(\\n        address operator,\\n        uint256 index,\\n        uint32 stalestUpdateBlock,\\n        uint32 latestServeUntilBlock\\n    );\\n\\n    /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n    event OptedIntoSlashing(\\n        address indexed operator,\\n        address indexed contractAddress\\n    );\\n\\n    /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilBlock`.\\n    event SlashingAbilityRevoked(\\n        address indexed operator,\\n        address indexed contractAddress,\\n        uint32 contractCanSlashOperatorUntilBlock\\n    );\\n\\n    /**\\n     * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n     * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n     */\\n    event OperatorFrozen(\\n        address indexed slashedOperator,\\n        address indexed slashingContract\\n    );\\n\\n    /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within EigenLayer.\\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function optIntoSlashing(address contractAddress) external;\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n     */\\n    function freezeOperator(address toBeFrozen) external;\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev adds the middleware's slashing contract to the operator's linked list\\n     */\\n    function recordFirstStakeUpdate(\\n        address operator,\\n        uint32 serveUntilBlock\\n    ) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n     *         to make sure the operator's stake at updateBlock is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param updateBlock the block for which the stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at updateBlock is slashable\\n     * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n     * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n     *      but it is anticipated to be rare and not detrimental.\\n     */\\n    function recordStakeUpdate(\\n        address operator,\\n        uint32 updateBlock,\\n        uint32 serveUntilBlock,\\n        uint256 insertAfter\\n    ) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n     * slash `operator` once `serveUntil` is reached\\n     */\\n    function recordLastStakeUpdateAndRevokeSlashingAbility(\\n        address operator,\\n        uint32 serveUntilBlock\\n    ) external;\\n\\n    /// @notice The StrategyManager contract of EigenLayer\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice The DelegationManager contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @param staker The staker of interest.\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool);\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(\\n        address toBeSlashed,\\n        address slashingContract\\n    ) external view returns (bool);\\n\\n    /// @notice Returns the block until which `serviceContract` is allowed to slash the `operator`.\\n    function contractCanSlashOperatorUntilBlock(\\n        address operator,\\n        address serviceContract\\n    ) external view returns (uint32);\\n\\n    /// @notice Returns the block at which the `serviceContract` last updated its view of the `operator`'s stake\\n    function latestUpdateBlock(\\n        address operator,\\n        address serviceContract\\n    ) external view returns (uint32);\\n\\n    /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n    function getCorrectValueForInsertAfter(\\n        address operator,\\n        uint32 updateBlock\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartBlock`, with `middlewareTimesIndex` used\\n     * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n     * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n     * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartBlock`, *or* in the event\\n     * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n     * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n     * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartBlock`.\\n     * @param withdrawalStartBlock The block number at which the withdrawal was initiated.\\n     * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n     * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n     */\\n    function canWithdraw(\\n        address operator,\\n        uint32 withdrawalStartBlock,\\n        uint256 middlewareTimesIndex\\n    ) external returns (bool);\\n\\n    /**\\n     * operator =>\\n     *  [\\n     *      (\\n     *          the least recent update block of all of the middlewares it's serving/served,\\n     *          latest time that the stake bonded at that update needed to serve until\\n     *      )\\n     *  ]\\n     */\\n    function operatorToMiddlewareTimes(\\n        address operator,\\n        uint256 arrayIndex\\n    ) external view returns (MiddlewareTimes memory);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n    function middlewareTimesLength(\\n        address operator\\n    ) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateBlock`.\\n    function getMiddlewareTimesIndexStalestUpdateBlock(\\n        address operator,\\n        uint32 index\\n    ) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n    function getMiddlewareTimesIndexServeUntilBlock(\\n        address operator,\\n        uint32 index\\n    ) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n    function operatorWhitelistedContractsLinkedListSize(\\n        address operator\\n    ) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n    function operatorWhitelistedContractsLinkedListEntry(\\n        address operator,\\n        address node\\n    ) external view returns (bool, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x1eb4df2685ef362aca5178e3053b5db8729243f6b6508354ba59ad2a91eb33ae\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakeRegistryStub.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStakeRegistryStub.sol\\\";\\n\\n// @notice Stub interface to avoid circular-ish inheritance, where core contracts rely on middleware interfaces\\ninterface IStakeRegistryStub {\\n    /**\\n     * @notice Used for updating information on deposits of nodes.\\n     * @param operators are the addresses of the operators whose stake information is getting updated\\n     */\\n    function updateStakes(address[] memory operators) external;\\n}\\n\",\"keccak256\":\"0x56eee7a5d083f4e0aa514554b660c7fe0a80d5af28c15976c1861bed2a0b3b70\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IProtocolConfig.sol\\\";\\n\\ninterface IStakingConfig is IProtocolConfig {\\n    event EigenManagerAddressChanged(address prevValue, address newValue);\\n    event MinUnstakeChanged(uint256 prevValue, uint256 newValue);\\n    event MinStakeChanged(uint256 prevValue, uint256 newValue);\\n\\n    function getRatioFeedAddress() external view returns (address);\\n\\n    function getStakingPoolAddress() external view returns (address);\\n\\n    function getEigenPodManagerAddress() external view returns (address);\\n\\n    function getCertTokenAddress() external view returns (address);\\n\\n    function getMinStake() external view returns (uint256);\\n\\n    function getMinUnstake() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6170075d5e783858675e8a63143b35955557d7ba76e264ebd87ec452debd41f1\",\"license\":\"MIT\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `Strategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\\n */\\ninterface IStrategy {\\n    /**\\n     * @notice Used to deposit tokens into this Strategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\\n     * @param recipient is the address to receive the withdrawn funds\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * other functions, and individual share balances are recorded in the strategyManager as well.\\n     */\\n    function withdraw(\\n        address recipient,\\n        IERC20 token,\\n        uint256 amountShares\\n    ) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlying(\\n        uint256 amountShares\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToShares(\\n        uint256 amountUnderlying\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\\n     * querying the `strategyManager` contract\\n     */\\n    function shares(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlyingView(\\n        uint256 amountShares\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToSharesView(\\n        uint256 amountUnderlying\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underlying token for shares in this Strategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in this Strategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcc72c7dc1f50cda58c97b5cbd87969b37352d1d76d22144aa1ee9e187fa930de\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManager {\\n    /**\\n     * @notice Emitted when a new deposit occurs on behalf of `staker`.\\n     * @param staker Is the staker who is depositing funds into EigenLayer.\\n     * @param strategy Is the strategy that `staker` has deposited into.\\n     * @param token Is the token that `staker` deposited.\\n     * @param shares Is the number of new shares `staker` has been granted in `strategy`.\\n     */\\n    event Deposit(\\n        address staker,\\n        IERC20 token,\\n        IStrategy strategy,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted when the `strategyWhitelister` is changed\\n    event StrategyWhitelisterChanged(\\n        address previousAddress,\\n        address newAddress\\n    );\\n\\n    /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\\n    event StrategyAddedToDepositWhitelist(IStrategy strategy);\\n\\n    /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\\n    event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the staker\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n     *\\n     * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n     */\\n    function depositIntoStrategy(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\\n     * who must sign off on the action.\\n     * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n     * purely to help one address deposit 'for' another.\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the staker\\n     * @param staker the staker that the deposited assets will be credited to\\n     * @param expiry the timestamp at which the signature expires\\n     * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n     * following EIP-1271 if the `staker` is a contract\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n     * targeting stakers who may be attempting to undelegate.\\n     * @dev Cannot be called on behalf of a staker that is 'frozen' (this function will revert if the `staker` is frozen).\\n     *\\n     *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\\n     */\\n    function depositIntoStrategyWithSignature(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount,\\n        address staker,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external returns (uint256 shares);\\n\\n    /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\\n    function removeShares(\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    ) external;\\n\\n    /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\\n    function addShares(\\n        address staker,\\n        IStrategy strategy,\\n        uint256 shares\\n    ) external;\\n\\n    /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\\n    function withdrawSharesAsTokens(\\n        address recipient,\\n        IStrategy strategy,\\n        uint256 shares,\\n        IERC20 token\\n    ) external;\\n\\n    /// @notice Returns the current shares of `user` in `strategy`\\n    function stakerStrategyShares(\\n        address user,\\n        IStrategy strategy\\n    ) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the staker's deposits and corresponding shares\\n     * @return (staker's strategies, shares in these strategies)\\n     */\\n    function getDeposits(\\n        address staker\\n    ) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\\n    function stakerStrategyListLength(\\n        address staker\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n     */\\n    function addStrategiesToDepositWhitelist(\\n        IStrategy[] calldata strategiesToWhitelist\\n    ) external;\\n\\n    /**\\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\\n     */\\n    function removeStrategiesFromDepositWhitelist(\\n        IStrategy[] calldata strategiesToRemoveFromWhitelist\\n    ) external;\\n\\n    /// @notice Returns the single, central Delegation contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /// @notice Returns the single, central Slasher contract of EigenLayer\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns the EigenPodManager contract of EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice Returns the address of the `strategyWhitelister`\\n    function strategyWhitelister() external view returns (address);\\n\\n    // LIMITED BACKWARDS-COMPATIBILITY FOR DEPRECATED FUNCTIONALITY\\n    // packed struct for queued withdrawals; helps deal with stack-too-deep errors\\n    struct DeprecatedStruct_WithdrawerAndNonce {\\n        address withdrawer;\\n        uint96 nonce;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct DeprecatedStruct_QueuedWithdrawal {\\n        IStrategy[] strategies;\\n        uint256[] shares;\\n        address staker;\\n        DeprecatedStruct_WithdrawerAndNonce withdrawerAndNonce;\\n        uint32 withdrawalStartBlock;\\n        address delegatedAddress;\\n    }\\n\\n    function migrateQueuedWithdrawal(\\n        DeprecatedStruct_QueuedWithdrawal memory queuedWithdrawal\\n    ) external returns (bool, bytes32);\\n\\n    function calculateWithdrawalRoot(\\n        DeprecatedStruct_QueuedWithdrawal memory queuedWithdrawal\\n    ) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1afc05cd6f12a267a45cab25d10fbadb31ab5d55859bb38e7a3ec540dc76a01c\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/BeaconChainProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Merkle.sol\\\";\\nimport \\\"../libraries/Endian.sol\\\";\\n\\n//Utility library for parsing and PHASE0 beacon chain block headers\\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\\nlibrary BeaconChainProofs {\\n    // constants are the number of fields and the heights of the different merkle trees used in merkleizing beacon chain containers\\n    uint256 internal constant NUM_BEACON_BLOCK_HEADER_FIELDS = 5;\\n    uint256 internal constant BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant NUM_BEACON_BLOCK_BODY_FIELDS = 11;\\n    uint256 internal constant BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT = 4;\\n\\n    uint256 internal constant NUM_BEACON_STATE_FIELDS = 21;\\n    uint256 internal constant BEACON_STATE_FIELD_TREE_HEIGHT = 5;\\n\\n    uint256 internal constant NUM_ETH1_DATA_FIELDS = 3;\\n    uint256 internal constant ETH1_DATA_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant NUM_VALIDATOR_FIELDS = 8;\\n    uint256 internal constant VALIDATOR_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant NUM_EXECUTION_PAYLOAD_HEADER_FIELDS = 15;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT = 4;\\n\\n    uint256 internal constant NUM_EXECUTION_PAYLOAD_FIELDS = 15;\\n    uint256 internal constant EXECUTION_PAYLOAD_FIELD_TREE_HEIGHT = 4;\\n\\n    // HISTORICAL_ROOTS_LIMIT\\t = 2**24, so tree height is 24\\n    uint256 internal constant HISTORICAL_ROOTS_TREE_HEIGHT = 24;\\n\\n    // HISTORICAL_BATCH is root of state_roots and block_root, so number of leaves =  2^1\\n    uint256 internal constant HISTORICAL_BATCH_TREE_HEIGHT = 1;\\n\\n    // SLOTS_PER_HISTORICAL_ROOT = 2**13, so tree height is 13\\n    uint256 internal constant STATE_ROOTS_TREE_HEIGHT = 13;\\n    uint256 internal constant BLOCK_ROOTS_TREE_HEIGHT = 13;\\n\\n    //HISTORICAL_ROOTS_LIMIT = 2**24, so tree height is 24\\n    uint256 internal constant HISTORICAL_SUMMARIES_TREE_HEIGHT = 24;\\n\\n    //Index of block_summary_root in historical_summary container\\n    uint256 internal constant BLOCK_SUMMARY_ROOT_INDEX = 0;\\n\\n    uint256 internal constant NUM_WITHDRAWAL_FIELDS = 4;\\n    // tree height for hash tree of an individual withdrawal container\\n    uint256 internal constant WITHDRAWAL_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\\n    //refer to the eigenlayer-cli proof library.  Despite being the same dimensions as the validator tree, the balance tree is merkleized differently\\n    uint256 internal constant BALANCE_TREE_HEIGHT = 38;\\n\\n    // MAX_WITHDRAWALS_PER_PAYLOAD = 2**4, making tree height = 4\\n    uint256 internal constant WITHDRAWALS_TREE_HEIGHT = 4;\\n\\n    //in beacon block body https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconblockbody\\n    uint256 internal constant EXECUTION_PAYLOAD_INDEX = 9;\\n\\n    // in beacon block header https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n    uint256 internal constant SLOT_INDEX = 0;\\n    uint256 internal constant PROPOSER_INDEX_INDEX = 1;\\n    uint256 internal constant STATE_ROOT_INDEX = 3;\\n    uint256 internal constant BODY_ROOT_INDEX = 4;\\n    // in beacon state https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconstate\\n    uint256 internal constant HISTORICAL_BATCH_STATE_ROOT_INDEX = 1;\\n    uint256 internal constant BEACON_STATE_SLOT_INDEX = 2;\\n    uint256 internal constant LATEST_BLOCK_HEADER_ROOT_INDEX = 4;\\n    uint256 internal constant BLOCK_ROOTS_INDEX = 5;\\n    uint256 internal constant STATE_ROOTS_INDEX = 6;\\n    uint256 internal constant HISTORICAL_ROOTS_INDEX = 7;\\n    uint256 internal constant ETH_1_ROOT_INDEX = 8;\\n    uint256 internal constant VALIDATOR_TREE_ROOT_INDEX = 11;\\n    uint256 internal constant BALANCE_INDEX = 12;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_INDEX = 24;\\n    uint256 internal constant HISTORICAL_SUMMARIES_INDEX = 27;\\n\\n    // in validator https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\\n    uint256 internal constant VALIDATOR_SLASHED_INDEX = 3;\\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\\n\\n    // in execution payload header\\n    uint256 internal constant TIMESTAMP_INDEX = 9;\\n    uint256 internal constant WITHDRAWALS_ROOT_INDEX = 14;\\n\\n    //in execution payload\\n    uint256 internal constant WITHDRAWALS_INDEX = 14;\\n\\n    // in withdrawal\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_INDEX_INDEX = 1;\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_AMOUNT_INDEX = 3;\\n\\n    //In historicalBatch\\n    uint256 internal constant HISTORICALBATCH_STATEROOTS_INDEX = 1;\\n\\n    //Misc Constants\\n\\n    /// @notice The number of slots each epoch in the beacon chain\\n    uint64 internal constant SLOTS_PER_EPOCH = 32;\\n\\n    /// @notice The number of seconds in a slot in the beacon chain\\n    uint64 internal constant SECONDS_PER_SLOT = 12;\\n\\n    /// @notice Number of seconds per epoch: 384 == 32 slots/epoch * 12 seconds/slot\\n    uint64 internal constant SECONDS_PER_EPOCH =\\n        SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\\n\\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\\n\\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a partial/full withdrawal\\n    struct WithdrawalProof {\\n        bytes withdrawalProof;\\n        bytes slotProof;\\n        bytes executionPayloadProof;\\n        bytes timestampProof;\\n        bytes historicalSummaryBlockRootProof;\\n        uint64 blockRootIndex;\\n        uint64 historicalSummaryIndex;\\n        uint64 withdrawalIndex;\\n        bytes32 blockRoot;\\n        bytes32 slotRoot;\\n        bytes32 timestampRoot;\\n        bytes32 executionPayloadRoot;\\n    }\\n\\n    /// @notice This struct contains the merkle proofs and leaves needed to verify a balance update\\n    struct BalanceUpdateProof {\\n        bytes validatorBalanceProof;\\n        bytes validatorFieldsProof;\\n        bytes32 balanceRoot;\\n    }\\n\\n    /// @notice This struct contains the root and proof for verifying the state root against the oracle block root\\n    struct StateRootProof {\\n        bytes32 beaconStateRoot;\\n        bytes proof;\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the fields of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param validatorFieldsProof is the data used in proving the validator's fields\\n     * @param validatorFields the claimed fields of the validator\\n     */\\n    function verifyValidatorFields(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata validatorFields,\\n        bytes calldata validatorFieldsProof,\\n        uint40 validatorIndex\\n    ) internal view {\\n        require(\\n            validatorFields.length == 2 ** VALIDATOR_FIELD_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length\\\"\\n        );\\n\\n        /**\\n         * Note: the length of the validator merkle proof is BeaconChainProofs.VALIDATOR_TREE_HEIGHT + 1.\\n         * There is an additional layer added by hashing the root with the length of the validator list\\n         */\\n        require(\\n            validatorFieldsProof.length ==\\n                32 *\\n                    ((VALIDATOR_TREE_HEIGHT + 1) +\\n                        BEACON_STATE_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Proof has incorrect length\\\"\\n        );\\n        uint256 index = (VALIDATOR_TREE_ROOT_INDEX <<\\n            (VALIDATOR_TREE_HEIGHT + 1)) | uint256(validatorIndex);\\n        // merkleize the validatorFields to get the leaf to prove\\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\\n\\n        // verify the proof of the validatorRoot against the beaconStateRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorFieldsProof,\\n                root: beaconStateRoot,\\n                leaf: validatorRoot,\\n                index: index\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Invalid merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the balance of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param validatorBalanceProof is the proof of the balance against the beacon chain state root\\n     * @param balanceRoot is the serialized balance used to prove the balance of the validator (refer to `getBalanceAtIndex` for detailed explanation)\\n     */\\n    function verifyValidatorBalance(\\n        bytes32 beaconStateRoot,\\n        bytes32 balanceRoot,\\n        bytes calldata validatorBalanceProof,\\n        uint40 validatorIndex\\n    ) internal view {\\n        require(\\n            validatorBalanceProof.length ==\\n                32 *\\n                    ((BALANCE_TREE_HEIGHT + 1) +\\n                        BEACON_STATE_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyValidatorBalance: Proof has incorrect length\\\"\\n        );\\n\\n        /**\\n         * the beacon state's balance list is a list of uint64 values, and these are grouped together in 4s when merkleized.\\n         * Therefore, the index of the balance of a validator is validatorIndex/4\\n         */\\n        uint256 balanceIndex = uint256(validatorIndex / 4);\\n        /**\\n         * Note: Merkleization of the balance root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\\n         * the array.  Thus we shift the BALANCE_INDEX over by BALANCE_TREE_HEIGHT + 1 and not just BALANCE_TREE_HEIGHT.\\n         */\\n        balanceIndex =\\n            (BALANCE_INDEX << (BALANCE_TREE_HEIGHT + 1)) |\\n            balanceIndex;\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorBalanceProof,\\n                root: beaconStateRoot,\\n                leaf: balanceRoot,\\n                index: balanceIndex\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorBalance: Invalid merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies the latestBlockHeader against the state root. the latestBlockHeader is\\n     * a tracked in the beacon state.\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param stateRootProof is the provided merkle proof\\n     * @param latestBlockRoot is hashtree root of the latest block header in the beacon state\\n     */\\n    function verifyStateRootAgainstLatestBlockRoot(\\n        bytes32 latestBlockRoot,\\n        bytes32 beaconStateRoot,\\n        bytes calldata stateRootProof\\n    ) internal view {\\n        require(\\n            stateRootProof.length ==\\n                32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Proof has incorrect length\\\"\\n        );\\n        //Next we verify the slot against the blockRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: stateRootProof,\\n                root: latestBlockRoot,\\n                leaf: beaconStateRoot,\\n                index: STATE_ROOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyStateRootAgainstLatestBlockRoot: Invalid latest block header root merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice This function verifies the slot and the withdrawal fields for a given withdrawal\\n     * @param withdrawalProof is the provided set of merkle proofs\\n     * @param withdrawalFields is the serialized withdrawal container to be proven\\n     */\\n    function verifyWithdrawal(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata withdrawalFields,\\n        WithdrawalProof calldata withdrawalProof\\n    ) internal view {\\n        require(\\n            withdrawalFields.length == 2 ** WITHDRAWAL_FIELD_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalFields has incorrect length\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.blockRootIndex < 2 ** BLOCK_ROOTS_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: blockRootIndex is too large\\\"\\n        );\\n        require(\\n            withdrawalProof.withdrawalIndex < 2 ** WITHDRAWALS_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalIndex is too large\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.historicalSummaryIndex <\\n                2 ** HISTORICAL_SUMMARIES_TREE_HEIGHT,\\n            \\\"BeaconChainProofs.verifyWithdrawal: historicalSummaryIndex is too large\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.withdrawalProof.length ==\\n                32 *\\n                    (EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT +\\n                        WITHDRAWALS_TREE_HEIGHT +\\n                        1),\\n            \\\"BeaconChainProofs.verifyWithdrawal: withdrawalProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.executionPayloadProof.length ==\\n                32 *\\n                    (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT +\\n                        BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: executionPayloadProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.slotProof.length ==\\n                32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: slotProof has incorrect length\\\"\\n        );\\n        require(\\n            withdrawalProof.timestampProof.length ==\\n                32 * (EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawal: timestampProof has incorrect length\\\"\\n        );\\n\\n        require(\\n            withdrawalProof.historicalSummaryBlockRootProof.length ==\\n                32 *\\n                    (BEACON_STATE_FIELD_TREE_HEIGHT +\\n                        (HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) +\\n                        1 +\\n                        (BLOCK_ROOTS_TREE_HEIGHT)),\\n            \\\"BeaconChainProofs.verifyWithdrawal: historicalSummaryBlockRootProof has incorrect length\\\"\\n        );\\n        /**\\n         * Note: Here, the \\\"1\\\" in \\\"1 + (BLOCK_ROOTS_TREE_HEIGHT)\\\" signifies that extra step of choosing the \\\"block_root_summary\\\" within the individual\\n         * \\\"historical_summary\\\". Everywhere else it signifies merkelize_with_mixin, where the length of an array is hashed with the root of the array,\\n         * but not here.\\n         */\\n        uint256 historicalBlockHeaderIndex = (HISTORICAL_SUMMARIES_INDEX <<\\n            ((HISTORICAL_SUMMARIES_TREE_HEIGHT + 1) +\\n                1 +\\n                (BLOCK_ROOTS_TREE_HEIGHT))) |\\n            (uint256(withdrawalProof.historicalSummaryIndex) <<\\n                (1 + (BLOCK_ROOTS_TREE_HEIGHT))) |\\n            (BLOCK_SUMMARY_ROOT_INDEX << (BLOCK_ROOTS_TREE_HEIGHT)) |\\n            uint256(withdrawalProof.blockRootIndex);\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.historicalSummaryBlockRootProof,\\n                root: beaconStateRoot,\\n                leaf: withdrawalProof.blockRoot,\\n                index: historicalBlockHeaderIndex\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid historicalsummary merkle proof\\\"\\n        );\\n\\n        //Next we verify the slot against the blockRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.slotProof,\\n                root: withdrawalProof.blockRoot,\\n                leaf: withdrawalProof.slotRoot,\\n                index: SLOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid slot merkle proof\\\"\\n        );\\n\\n        {\\n            // Next we verify the executionPayloadRoot against the blockRoot\\n            uint256 executionPayloadIndex = (BODY_ROOT_INDEX <<\\n                (BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT)) |\\n                EXECUTION_PAYLOAD_INDEX;\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: withdrawalProof.executionPayloadProof,\\n                    root: withdrawalProof.blockRoot,\\n                    leaf: withdrawalProof.executionPayloadRoot,\\n                    index: executionPayloadIndex\\n                }),\\n                \\\"BeaconChainProofs.verifyWithdrawal: Invalid executionPayload merkle proof\\\"\\n            );\\n        }\\n\\n        // Next we verify the timestampRoot against the executionPayload root\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: withdrawalProof.timestampProof,\\n                root: withdrawalProof.executionPayloadRoot,\\n                leaf: withdrawalProof.timestampRoot,\\n                index: TIMESTAMP_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyWithdrawal: Invalid blockNumber merkle proof\\\"\\n        );\\n\\n        {\\n            /**\\n             * Next we verify the withdrawal fields against the blockRoot:\\n             * First we compute the withdrawal_index relative to the blockRoot by concatenating the indexes of all the\\n             * intermediate root indexes from the bottom of the sub trees (the withdrawal container) to the top, the blockRoot.\\n             * Then we calculate merkleize the withdrawalFields container to calculate the the withdrawalRoot.\\n             * Finally we verify the withdrawalRoot against the executionPayloadRoot.\\n             *\\n             *\\n             * Note: Merkleization of the withdrawals root tree uses MerkleizeWithMixin, i.e., the length of the array is hashed with the root of\\n             * the array.  Thus we shift the WITHDRAWALS_INDEX over by WITHDRAWALS_TREE_HEIGHT + 1 and not just WITHDRAWALS_TREE_HEIGHT.\\n             */\\n            uint256 withdrawalIndex = (WITHDRAWALS_INDEX <<\\n                (WITHDRAWALS_TREE_HEIGHT + 1)) |\\n                uint256(withdrawalProof.withdrawalIndex);\\n            bytes32 withdrawalRoot = Merkle.merkleizeSha256(withdrawalFields);\\n            require(\\n                Merkle.verifyInclusionSha256({\\n                    proof: withdrawalProof.withdrawalProof,\\n                    root: withdrawalProof.executionPayloadRoot,\\n                    leaf: withdrawalRoot,\\n                    index: withdrawalIndex\\n                }),\\n                \\\"BeaconChainProofs.verifyWithdrawal: Invalid withdrawal merkle proof\\\"\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice This function replicates the ssz hashing of a validator's pubkey, outlined below:\\n     *  hh := ssz.NewHasher()\\n     *  hh.PutBytes(validatorPubkey[:])\\n     *  validatorPubkeyHash := hh.Hash()\\n     *  hh.Reset()\\n     */\\n    function hashValidatorBLSPubkey(\\n        bytes memory validatorPubkey\\n    ) internal pure returns (bytes32 pubkeyHash) {\\n        require(\\n            validatorPubkey.length == 48,\\n            \\\"Input should be 48 bytes in length\\\"\\n        );\\n        return sha256(abi.encodePacked(validatorPubkey, bytes16(0)));\\n    }\\n\\n    /**\\n     * @notice Parses a balanceRoot to get the uint64 balance of a validator.\\n     * @dev During merkleization of the beacon state balance tree, four uint64 values are treated as a single\\n     * leaf in the merkle tree. We use validatorIndex % 4 to determine which of the four uint64 values to\\n     * extract from the balanceRoot.\\n     * @param balanceRoot is the combination of 4 validator balances being proven for\\n     * @param validatorIndex is the index of the validator being proven for\\n     * @return The validator's balance, in Gwei\\n     */\\n    function getBalanceAtIndex(\\n        bytes32 balanceRoot,\\n        uint40 validatorIndex\\n    ) internal pure returns (uint64) {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        return\\n            Endian.fromLittleEndianUint64(\\n                bytes32((uint256(balanceRoot) << bitShiftAmount))\\n            );\\n    }\\n\\n    /**\\n     * @dev Retrieve the withdrawal timestamp\\n     */\\n    function getWithdrawalTimestamp(\\n        WithdrawalProof memory withdrawalProof\\n    ) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(withdrawalProof.timestampRoot);\\n    }\\n\\n    /**\\n     * @dev Converts the withdrawal's slot to an epoch\\n     */\\n    function getWithdrawalEpoch(\\n        WithdrawalProof memory withdrawalProof\\n    ) internal pure returns (uint64) {\\n        return\\n            Endian.fromLittleEndianUint64(withdrawalProof.slotRoot) /\\n            SLOTS_PER_EPOCH;\\n    }\\n\\n    /**\\n     * Indices for validator fields (refer to consensus specs):\\n     * 0: pubkey\\n     * 1: withdrawal credentials\\n     * 2: effective balance\\n     * 3: slashed?\\n     * 4: activation elligibility epoch\\n     * 5: activation epoch\\n     * 6: exit epoch\\n     * 7: withdrawable epoch\\n     */\\n\\n    /**\\n     * @dev Retrieves a validator's pubkey hash\\n     */\\n    function getPubkeyHash(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (bytes32) {\\n        return validatorFields[VALIDATOR_PUBKEY_INDEX];\\n    }\\n\\n    function getWithdrawalCredentials(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (bytes32) {\\n        return validatorFields[VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX];\\n    }\\n\\n    /**\\n     * @dev Retrieves a validator's effective balance (in gwei)\\n     */\\n    function getEffectiveBalanceGwei(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (uint64) {\\n        return\\n            Endian.fromLittleEndianUint64(\\n                validatorFields[VALIDATOR_BALANCE_INDEX]\\n            );\\n    }\\n\\n    /**\\n     * @dev Retrieves a validator's withdrawable epoch\\n     */\\n    function getWithdrawableEpoch(\\n        bytes32[] memory validatorFields\\n    ) internal pure returns (uint64) {\\n        return\\n            Endian.fromLittleEndianUint64(\\n                validatorFields[VALIDATOR_WITHDRAWABLE_EPOCH_INDEX]\\n            );\\n    }\\n\\n    /**\\n     * Indices for withdrawal fields (refer to consensus specs):\\n     * 0: withdrawal index\\n     * 1: validator index\\n     * 2: execution address\\n     * 3: withdrawal amount\\n     */\\n\\n    /**\\n     * @dev Retrieves a withdrawal's validator index\\n     */\\n    function getValidatorIndex(\\n        bytes32[] memory withdrawalFields\\n    ) internal pure returns (uint40) {\\n        return\\n            uint40(\\n                Endian.fromLittleEndianUint64(\\n                    withdrawalFields[WITHDRAWAL_VALIDATOR_INDEX_INDEX]\\n                )\\n            );\\n    }\\n\\n    /**\\n     * @dev Retrieves a withdrawal's withdrawal amount (in gwei)\\n     */\\n    function getWithdrawalAmountGwei(\\n        bytes32[] memory withdrawalFields\\n    ) internal pure returns (uint64) {\\n        return\\n            Endian.fromLittleEndianUint64(\\n                withdrawalFields[WITHDRAWAL_VALIDATOR_AMOUNT_INDEX]\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x0ab7dfa3d7445860a632848a9b3fd583bbafeec534b884687296f80e2aff197e\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(\\n        bytes32 lenum\\n    ) internal pure returns (uint64 n) {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n}\\n\",\"keccak256\":\"0x4014b11314f214d2c7613b275256e00b8b6e27734b1214b21de8c3a47dc3f2a8\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function verifyInclusionKeccak(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        return processInclusionProofKeccak(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function processInclusionProofKeccak(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, computedHash)\\n                    mstore(0x20, mload(add(proof, i)))\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, computedHash)\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(\\n                        staticcall(\\n                            sub(gas(), 2000),\\n                            2,\\n                            0x00,\\n                            0x40,\\n                            computedHash,\\n                            0x20\\n                        )\\n                    ) {\\n                        revert(0, 0)\\n                    }\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash[0];\\n    }\\n\\n    /**\\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\\n     @param leaves the leaves of the merkle tree\\n     @return The computed Merkle root of the tree.\\n     @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\\n     */\\n    function merkleizeSha256(\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32) {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint i = 0; i < numNodesInLayer; i++) {\\n            layer[i] = sha256(\\n                abi.encodePacked(leaves[2 * i], leaves[2 * i + 1])\\n            );\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint i = 0; i < numNodesInLayer; i++) {\\n                layer[i] = sha256(\\n                    abi.encodePacked(layer[2 * i], layer[2 * i + 1])\\n                );\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n}\\n\",\"keccak256\":\"0xebcbc754a875c810d6953fce052b6acf76f3b141f48ddf22beb9bf28f580a85e\",\"license\":\"BUSL-1.1\"},\"contracts/restaker/IRestaker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IRestakerFacets.sol\\\";\\n\\n/**\\n * @title Diamond-like implementation which support call with context (simple call).\\n * @author GenesisLST\\n */\\ninterface IRestaker {\\n    error RestakerCannotClaim();\\n\\n    event Claimed(address indexed recipient, uint256 amount);\\n\\n    function initialize(address owner, IRestakerFacets facets) external;\\n    function __claim() external;\\n}\\n\",\"keccak256\":\"0x2265c0ef065ae07a82801f879c9657ca5078165dbfd377ed4f865c0fd9524c3f\",\"license\":\"MIT\"},\"contracts/restaker/IRestakerDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./IRestaker.sol\\\";\\n\\ninterface IRestakerDeployer {\\n    event RestakerDeployed(\\n        address indexed creator,\\n        IRestaker indexed restaker,\\n        uint256 id\\n    );\\n\\n    function BEACON_PROXY_BYTECODE() external view returns (bytes memory);\\n\\n    function beacon() external view returns (address);\\n\\n    function nonce() external view returns (uint256);\\n\\n    function deployRestaker() external returns (IRestaker restaker);\\n\\n    function getRestaker(uint256 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0xfca95925b9018f4f8c7e390b8336c3e61dfc7f3629df985b30743bc5cb2d0df2\",\"license\":\"MIT\"},\"contracts/restaker/IRestakerFacets.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interfaces/IEigenPodManager.sol\\\";\\n\\ninterface IRestakerFacets {\\n    error ZeroAddress();\\n\\n    enum FuncTarget {\\n        POD,\\n        POD_MANAGER,\\n        DELEGATION_MANAGER\\n    }\\n\\n    function selectorToTarget(bytes4 sig) external view returns (address);\\n\\n    function getEigenPodManager() external view returns (IEigenPodManager);\\n}\\n\",\"keccak256\":\"0x135381a3f3e6646014e05d6eb9fae16b0db43a08eb7e4aff24a5d203eeb2be5d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "getCertTokenAddress()": {
        "details": "Deprecated."
      },
      "getEigenPodManagerAddress()": {
        "details": "Deprecated."
      }
    },
    "stateVariables": {
      "_minimumUnstake": {
        "details": "compact size, should be multiplied by 1 gwei"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 139,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 142,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5148,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_minimumUnstake",
        "offset": 2,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 5150,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_minimumStake",
        "offset": 10,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 5152,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_operatorAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5154,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_governanceAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5156,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_treasuryAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5158,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_ratioFeedAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5160,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_stakingPoolAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5162,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_eigenPodManagerAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5164,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_certTokenAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5167,
        "contract": "contracts/StakingConfig.sol:StakingConfig",
        "label": "_restakerDeployer",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IRestakerDeployer)10301"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IRestakerDeployer)10301": {
        "encoding": "inplace",
        "label": "contract IRestakerDeployer",
        "numberOfBytes": "20"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}